!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){var r=n(1),o=n(2);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],u=e.base?i[0]+e.base:i[0],c=n[u]||0,f="".concat(u," ").concat(c);n[u]=c+1;var l=s(f),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(a[l].references++,a[l].updater(h)):a.push({identifier:f,updater:v(h,e),references:1}),r.push(f)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function h(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function y(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function v(t,e){var n,r,o;if(e.singleton){var i=d++;n=p||(p=c(e)),r=h.bind(null,n,i,!1),o=h.bind(null,n,i,!0)}else n=c(e),r=y.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=u(t,e),c=0;c<n.length;c++){var f=s(n[c]);0===a[f].references&&(a[f].updater(),a.splice(f,1))}n=i}}}},function(t,e,n){var r=n(3),o=n(4),i=n(5);e=r(!1);var a=o(i);e.push([t.i,'@font-face {\n  font-family: "Cadence";\n  src: url('+a+') format("woff");\n  font-weight: normal;\n  font-style: normal;\n}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default="data:font/woff;base64,"},function(t,e,n){"use strict";n.r(e);var r=[].concat,o=function(t){return r.apply([],t)},i=function(t,e){return new Array(e+1).join(t)},a=function(t){return t[t.length-1]},s=function(t){return Math.min.apply(null,t)},u=function(t){return Math.max.apply(null,t)},c=function(t){return t.reduce((function(t,e){return t+e}))},f=function(t,e){void 0===e&&(e=t,t=0);for(var n=[],r=t;r<e;r++)n.push(r);return n},l=function(t){for(var e=[],n=0;n<t;n++)e.push(0);return e},h=function(t){var e={};return t.forEach((function(t){e[t]=!0})),e},y=function(t){return e=h(t),Object.keys(e);var e},p=function(t){var e={};for(var n in t)e[t[n]]=n;return e},d=[].slice;function v(){var t=["name"].concat(d.apply(arguments));return function(){var e=this,n={};return t.forEach((function(t){n[t]=e[t]})),n}}var b,m=function(t,e,n){var r=document.createElementNS("http://www.w3.org/2000/svg",t);for(var o in e)r.setAttribute(o,e[o]);return n.appendChild?r.appendChild(n):r.textContent=n,r},w={},g=function(t,e){var n=t+e;if(w[n])return w[n];!function(){if(b)return b;b=m("text",{x:0,y:50},"");var t=m("svg",{width:0,height:0},b);document.body.appendChild(t)}();var r="font-family: ".concat(t.family,"; font-size: ").concat(t.size);b.setAttribute("style",r),b.textContent=e;var o=b.getBBox(),i={width:o.width,height:o.height};return w[n]=i,i};function O(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(!t)return;if("string"==typeof t)return S(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(t,e)}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function S(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function k(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function j(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?k(Object(n),!0).forEach((function(e){x(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function x(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function P(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function L(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function E(t,e,n){return e&&L(t.prototype,e),n&&L(t,n),t}var R=function(){function t(e){P(this,t),this.data=e.split("\n"),this.ln=-1,this.nextLine()}return E(t,[{key:"eof",get:function(){return this.ln===this.data.length-1&&this.line.eol}},{key:"nextLine",value:function(){this.ln++,this.line=new A(this.data[this.ln])}}]),t}(),A=function(){function t(e){P(this,t),this.str=e,this.rest=e,this.col=0}return E(t,[{key:"eol",get:function(){return 0===this.rest.length}},{key:"advance",value:function(t){this.col+=t,this.rest=this.rest.substr(t)}},{key:"cutoff",value:function(t){this.cutoffRest=this.rest.substr(t),this.rest=this.rest.substr(0,t),this.isCutoff=!0}},{key:"joinCutoff",value:function(){this.rest+=this.cutoffRest,this.isCutoff=!1}}]),t}(),D={S:" ",SS:" +",ALL:".+"};function T(t){return function(){function e(n){P(this,e),this.name="lexer",this.src=n.replace(/\r\n/g,"\n"),this.lines=new R(this.src);var r=function(t){t=j(j({},D),t);var e=[{},{},{}];for(var n in t)e[0][n]=new RegExp("^"+t[n]),e[1][n]=new RegExp(t[n]),e[2][n]=new RegExp(t[n],"g");return e}(t);this.patterns=r[0],this.aheadPatterns=r[1],this.globalPatterns=r[2]}return E(e,[{key:"line",get:function(){return this.lines.line}},{key:"ln",get:function(){return this.lines.ln}},{key:"col",get:function(){return this.line.col}},{key:"eol",get:function(){return this.line.eol}},{key:"eof",get:function(){return this.lines.eof}},{key:"nextLine",value:function(){this.lines.nextLine()}},{key:"getPattern",value:function(t){if(t in this.patterns)return this.patterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"getAheadPattern",value:function(t){if(t in this.aheadPatterns)return this.aheadPatterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"getGlobalPattern",value:function(t){if(t in this.globalPatterns)return this.globalPatterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"eat",value:function(t){var e=this.line.rest.match(this.getPattern(t));e||this.error("token [".concat(t,"]")),this.lexeme=e[0],this.line.isCutoff&&this.line.joinCutoff(),this.line.advance(this.lexeme.length)}},{key:"prevent",value:function(t){var e=this.line.rest.match(this.getAheadPattern(t));return e&&this.line.cutoff(e.index),this}},{key:"escprevent",value:function(t,e){var n=this.line.rest.matchAll(this.getGlobalPattern(t));if(!n)return this;var r,o,i=this.line.rest.matchAll(this.getGlobalPattern(e)),a=[],s=function(t){for(var e=0;e<a.length;e++){var n=a[e];if(t>=n[0]&&t<n[1])return!0}},u=O(i);try{for(u.s();!(o=u.n()).done;){var c=o.value;a.push([c.index,c.index+c[0].length])}}catch(t){u.e(t)}finally{u.f()}var f,l=O(n);try{for(l.s();!(f=l.n()).done;){var h=f.value;if(!s(h.index)){r=h.index;break}}}catch(t){l.e(t)}finally{l.f()}return r>=0&&this.line.cutoff(r),this}},{key:"is",value:function(t){return this.getPattern(t).test(this.line.rest)}},{key:"token",value:function(t,e){this.eat(t),e&&e(this.lexeme)}},{key:"optional",value:function(t,e){this.lexeme="",this.is(t)?this.eat(t):this.line.isCutoff&&this.line.joinCutoff(),e&&e(this.lexeme)}},{key:"without",value:function(t,e){this.prevent(t).token("ALL",(function(t){return e(t)}))}},{key:"escwithout",value:function(t,e,n){this.escprevent(t,e).token("ALL",(function(t){return n(t)}))}},{key:"mlwithout",value:function(t,e){for(var n=this.getAheadPattern(t),r=[],o=this.line.rest.match(n);!o&&(r.push(this.line.rest),this.line.advance(this.line.rest.length),!this.eof);)this.nextLine(),o=this.line.rest.match(n);if(o){var i=this.line.rest.substr(0,o.index);r.push(i),this.line.advance(i.length)}this.lexeme=r.join("\n"),e&&e(this.lexeme)}},{key:"error",value:function(t){throw new Error("".concat(t," at line ").concat(this.ln+1," column ").concat(this.col+1,".\n").concat(this.line.str,"\n").concat(i(" ",this.line.col),"^"))}},{key:"skipSS",value:function(){this.optional("SS")}},{key:"skipWhite",value:function(){for(;(this.is("S")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.token("SS")}}]),e}()}function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var C=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("value"),this.name="sl-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("//"),t.token("all",(function(t){e.value=t}))}},{key:"toString",value:function(){return"//"+this.value}}])&&N(e.prototype,n),r&&N(e,r),t}();function B(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var z=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("value"),this.name="ml-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("/*"),t.mlwithout("*/",(function(t){e.value=t})),t.token("*/")}},{key:"toString",value:function(){return"/*".concat(this.value,"*/")}}])&&B(e.prototype,n),r&&B(e,r),t}(),F="⺀-⿕㆐-㆟㐀-䶿一-鿌豈-節",M="A-Za-zÀ-ɏ".concat(F),G=T({0:"0",",":",","/":"\\/","\\":"\\\\","<":"<",">":">","|":"\\|","~":"~","-":"-","(":"\\(",")":"\\)","[":"\\[","]":"\\]",":":":","/\\":"[\\/\\\\]","==":"==","--":"--","//":"\\/\\/","/*":"\\/\\*","*/":"\\*\\/",digit:"\\d",digits:"\\d+",paran:"[\\(\\)]",letter:"[".concat(M,"]"),word:"[".concat(M,"]+"),words:"[".concat(M," ]+"),abbreviation:"[".concat(M,"\\.]+"),midi:"midi",channel:"channel",program:"program",pan:"pan",title:"title:",subtitle:"subtitle:",composer:"composer:",lyricist:"lyricist:",arranger:"arranger:",source:"source:",beats:"[1-9]\\d{0,3}",beatType:"[1-9]\\d{0,3}",step:"[1-7]",accidental:"(#{1,2}|n|b{1,2})",octave:"('{1,5}|,{1,5})",type:"(---|-|={0,5}_|={1,5})",dots:"\\.{1,2}",pitch:"[#nb]*[1-7][,']*",duration:"[-_=]*.{1,2}",time:"[1-9]\\d{0,3}\\/",note:"\\(*(\\[\\d+:)*".concat("[#nb]*[1-7][,']*"),rest:"0",chord:"\\(*(\\[\\d+:)*<(".concat("[#nb]*[1-7][,']*",")*>"),multipart:"<",direction:"[\\/\\\\][".concat(M," ]+"),bar:"(:\\|:?|\\|:|\\|[\\|\\]]?)",wedge:"wedge",dynamics:"(p{1,6}|f{1,6}|m[pf]|sfp{0,2}|fp|rfz?|sf{1,2}z|fz)","tuplet-begin":"\\[\\d+:","tuplet-end":":\\]","lyrics-head":"lyrics.*:",lyric:"([A-Za-zÀ-ɏ,\\.!']+|[".concat(F,"])"),"lyric-control":"[@\\+\\-]m?\\d","lyric-control-symbol":"[@\\+\\-]",m:"m",cell:"([\\(\\[]*[#nb]?\\d|<|[\\:\\|]|[\\/\\\\])","part-head":"==","sl-comment":"\\/\\/","ml-comment":"\\/\\*",comment:"\\/[\\/\\*]",all:".*"});G.prototype.skipWhite=function(){for(;(this.is("S")||this.is("comment")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.is("S")?this.token("SS"):this.is("sl-comment")?new C(this):new z(this)};var Q=G;function W(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function J(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var q=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};W(this,t),this.toJSON=v("title","subtitle","composer","lyricist","arranger","source"),this.name="head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.title=e.title,this.subtitle=e.subtitle,this.composer=e.composer,this.lyricist=e.lyricist,this.arranger=e.arranger,this.source=e.source)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(var e=this,n=function(n){t.token(n),t.without("comment",(function(t){e[n]=t.trim()}))};!t.eof;){if(t.is("title"))n("title");else if(t.is("subtitle"))n("subtitle");else if(t.is("composer"))n("composer");else if(t.is("lyricist"))n("lyricist");else if(t.is("arranger"))n("arranger");else{if(!t.is("source"))break;n("source")}t.skipWhite()}}},{key:"toString",value:function(){var t=[];return this.title&&t.push("title: ".concat(this.title)),this.subtitle&&t.push("subtitle: ".concat(this.subtitle)),this.composer&&t.push("composer: ".concat(this.composer)),this.lyricist&&t.push("lyricist: ".concat(this.lyricist)),this.arranger&&t.push("arranger: ".concat(this.arranger)),this.source&&t.push("source: ".concat(this.source)),t.join("\n")}}])&&J(e.prototype,n),r&&J(e,r),t}();function I(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function V(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var U=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};I(this,t),this.toJSON=v("partName","midi"),this.name="part-head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.partName=e.partName,this.abbreviation=e.abbreviation||"",this.midi=e.midi)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;if(t.token("=="),t.token("words",(function(t){e.partName=t.trim()})),t.skipSS(),this.abbreviation="",t.is("(")&&(t.token("("),t.token("abbreviation",(function(t){e.abbreviation=t})),t.token(")")),t.is(":")){t.token(":"),t.skipSS();var n=this.midi={};t.token("midi"),t.token("("),t.token("channel"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.channel=+t})),t.token(","),t.skipSS(),t.token("program"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.program=+t})),t.token(","),t.skipSS(),t.token("pan"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.pan=+t})),t.token(")")}t.skipWhite()}},{key:"toString",value:function(){var t=this.partName,e=this.abbreviation,n=this.midi,r=["=="];if(t&&r.push(t),e&&r.push("(".concat(e,")")),n){r[r.length-1]+=":";var o=n.channel,i=n.program,a=n.pan,s=[];"number"==typeof o&&s.push("channel: ".concat(o)),"number"==typeof i&&s.push("program: ".concat(i)),"number"==typeof a&&s.push("pan: ".concat(a)),r.push("midi(".concat(s.join(", "),")"))}return r.join(" ")}}])&&V(e.prototype,n),r&&V(e,r),t}(),X=14898723840;function K(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("beats","beatType"),this.name="time","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.beats=e.beats,this.beatType=e.beatType)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("beats",(function(t){e.beats=+t})),t.token("/"),t.token("beatType",(function(t){e.beatType=+t}))}},{key:"toString",value:function(){return"".concat(this.beats,"/").concat(this.beatType)}}])&&K(e.prototype,n),r&&K(e,r),t}();function Z(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"onplay",get:function(){return this._onplay||this.defaultOnplay.bind(this)},set:function(t){var e=this.onplay;this._onplay=function(){e(),t()}}},{key:"onstop",get:function(){return this._onstop||this.defaultOnstop.bind(this)},set:function(t){var e=this.onstop;this._onstop=function(){e(),t()}}},{key:"defaultOnplay",value:function(){}},{key:"defaultOnstop",value:function(){}}])&&Z(e.prototype,n),r&&Z(e,r),t}();function _(t){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function et(t,e){return(et=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function nt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ot(t);if(e){var o=ot(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return rt(this,n)}}function rt(t,e){if(e&&("object"===_(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ot(t){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var it={1:0,2:2,3:4,4:5,5:7,6:9,7:11},at={"#":1,"##":2,n:0,"":0,b:-1,bb:-2},st=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&et(t,e)}(a,t);var e,n,r,o=nt(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=o.call(this)).toJSON=v("step","accidental","octave"),e.name="pitch","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):(e.step=t.step||1,e.accidental=t.accidental||"",e.octave=t.octave||0,e.midiNumber=t.midiNumber),e}return e=a,(n=[{key:"parse",value:function(t){var e=this;t.optional("accidental",(function(t){e.accidental=t})),t.token("step",(function(t){e.step=+t})),t.optional("octave",(function(t){e.octave="'"===t[0]?t.length:","===t[0]?-t.length:0}))}},{key:"alter",get:function(){return"number"==typeof this._alter?this._alter:at[this.accidental]},set:function(t){this._alter=t}},{key:"midiNumber",get:function(){return it[this.step]+this.alter+12*this.octave+60},set:function(t){}},{key:"frequency",get:function(){}},{key:"defaultOnplay",value:function(){this.tie&&this.tie.onplay()}},{key:"defaultOnstop",value:function(){this.tie&&this.tie.onstop()}},{key:"toString",value:function(){var t=this.step,e=this.accidental,n=this.octave,r=n>0?i("'",n):i(",",-n);return"".concat(e).concat(t).concat(r)}}])&&tt(e.prototype,n),r&&tt(e,r),a}(Y);function ut(t){return(ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ft(t,e){return(ft=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function lt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=yt(t);if(e){var o=yt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ht(this,n)}}function ht(t,e){if(e&&("object"===ut(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function yt(t){return(yt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var pt={"---":1,"-":2,"":4,_:8,"=":16,"=_":32,"==":64,"==_":128,"===":256,"===_":512,"====":1024},dt=p(pt),vt=[1,1.5,1.75],bt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ft(t,e)}(a,t);var e,n,r,o=lt(a);function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=o.call(this)).toJSON=v("type","dots","modification"),e.name="duration","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):(e.type=t.type||4,e.dots=t.dot||0,e.modification=t.modification),e.type>4&&e.initBeams(),e}return e=a,(n=[{key:"initBeams",value:function(){this.numBeams=Math.log2(this.type)-2,this.beams=f(this.numBeams).map((function(){return{type:"single"}}))}},{key:"parse",value:function(t){var e=this;t.optional("type",(function(t){e.type=pt[t]})),t.optional("dots",(function(t){e.dots=t.length}))}},{key:"quartersQ",get:function(){var t=this.modification;return 4*X/this.type*vt[this.dots]*(t?t.normal/t.actual:1)}},{key:"quarters",get:function(){return this.quartersQ/X}},{key:"toString",value:function(){return"".concat(dt[this.type]).concat(i(".",this.dots))}}])&&ct(e.prototype,n),r&&ct(e,r),a}(Y);function mt(t){return(mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function wt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function gt(t,e){return(gt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ot(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=kt(t);if(e){var o=kt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return St(this,n)}}function St(t,e){if(e&&("object"===mt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function kt(t){return(kt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var jt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&gt(t,e)}(i,t);var e,n,r,o=Ot(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this)).toJSON=v("type"),e.name="tie","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):(e.type=t.type,e.cell=t.cell),e}return e=i,(n=[{key:"parse",value:function(t){var e=this;t.token("~",(function(){e.type="begin"}))}},{key:"toString",value:function(){return"end"===this.type?"":"~"}}])&&wt(e.prototype,n),r&&wt(e,r),i}(Y);function xt(t){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Lt(t,e){return(Lt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Et(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=At(t);if(e){var o=At(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Rt(this,n)}}function Rt(t,e){if(e&&("object"===xt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function At(t){return(At=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Dt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Lt(t,e)}(i,t);var e,n,r,o=Et(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this)).toJSON=v("value"),e.name="slur","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):e.value=t.value,e}return e=i,(n=[{key:"parse",value:function(t){var e=this;t.token("paran",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&Pt(e.prototype,n),r&&Pt(e,r),i}(Y);function Tt(t){return(Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ct(t,e){return(Ct=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Bt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ft(t);if(e){var o=Ft(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return zt(this,n)}}function zt(t,e){if(e&&("object"===Tt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ft(t){return(Ft=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Mt=0,Gt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ct(t,e)}(i,t);var e,n,r,o=Bt(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this)).toJSON=v("type"),e.name="tuplet","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):(e.type=t.type,"start"===e.type?i.tupletLengthInTu=1:"stop"===e.type&&(i.tupletLengthInTu=0,console.log("tuplet = 0"))),e}return e=i,r=[{key:"tupletLengthInTu",get:function(){return Mt},set:function(t){Mt=t}}],(n=[{key:"parse",value:function(t){var e=this;t.is("[")?(t.token("[",(function(){e.type="start"})),t.token("digits",(function(t){e.actual=+t})),this.normal=2,t.token(":")):t.is("tuplet-end")&&t.token("tuplet-end",(function(){e.type="stop"}))}},{key:"toString",value:function(){return this.type}}])&&Nt(e.prototype,n),r&&Nt(e,r),i}(Y);function Qt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Wt=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("syllabic","text"),this.name="lyric",this.prev=n,"lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.syllabic=e.syllabic,this.text=e.text)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("lyric",(function(t){e.text=t})),t.skipWhite(),!t.is("-")||t.is("--")||t.is("lyric-control")?function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="end";break;case"end":case"single":default:e.syllabic="single"}}():(function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="middle";break;case"end":case"single":default:e.syllabic="begin"}}(),t.token("-"),t.skipWhite())}},{key:"toString",value:function(){switch(this.syllabic){case"single":case"end":return this.text;case"begin":case"middle":return"".concat(this.text," -")}return this.text}}])&&Qt(e.prototype,n),r&&Qt(e,r),t}();function Jt(t){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function qt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function It(t,e){return(It=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Vt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Xt(t);if(e){var o=Xt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ut(this,n)}}function Ut(t,e){if(e&&("object"===Jt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Xt(t){return(Xt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Kt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&It(t,e)}(i,t);var e,n,r,o=Vt(i);function i(t){var e;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this)).toJSON=v("pitch","duration","tie","tuplet","beginSlurs","endSlurs","lyric"),e.renderX=0,e.renderY=0,e.name="note","lexer"===t.name)e.parse(t);else if("string"==typeof t)e.parse(new Q(t));else{var n=t.pitch,r=t.duration,a=t.articulations,s=t.tie,u=t.beginSlurs,c=t.endSlurs,f=t.tuplet,l=t.lyrics;Gt.tupletLengthInTu>=1&&(Gt.tupletLengthInTu=Gt.tupletLengthInTu+1),e.pitch=new st(n),e.duration=new bt(r),a&&(e.articulations=a),s&&(e.tie=new jt(s)),u&&(e.beginSlurs=u.map((function(t){return new Dt(t)}))),c&&(e.endSlurs=c.map((function(t){return new Dt(t)}))),f&&(e.tuplet=new Gt(f)),l&&(e.lyrics=l.map((function(t){return new Wt(t)})))}return e}return e=i,(n=[{key:"parse",value:function(t){for(;t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new Dt(t));for(;t.is("[");)this.tuplet=new Gt(t);for(this.pitch=new st(t),this.duration=new bt(t);t.is("tuplet-end");)this.tuplet=new Gt(t);for(t.is("~")&&(this.tie=new jt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new Dt(t))}},{key:"defaultOnplay",value:function(){this.pitch.onplay(),this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.pitch.onstop(),this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.articulations,n=this.beginSlurs,r=this.endSlurs,o=this.tuplet,i=this.duration,a=this.tie;return n&&t.push(n.join("")),o&&"begin"===o.type&&t.push("[".concat(i.modification.actual,":")),e&&t.push("x"),t.push("".concat(this.pitch).concat(i)),o&&"end"===o.type&&t.push(":]"),r&&t.push(r.join("")),a&&t.push(this.tie),t.join("")}}])&&qt(e.prototype,n),r&&qt(e,r),i}(Y);function Ht(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Zt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("duration"),this.name="rest","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.duration=new bt(e.duration)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){t.token("0"),this.duration=new bt(t)}},{key:"toString",value:function(){return"0"+this.duration}}])&&Ht(e.prototype,n),r&&Ht(e,r),t}();function Yt(t){return(Yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function $t(t,e){return($t=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function te(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ne(t);if(e){var o=ne(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ee(this,n)}}function ee(t,e){if(e&&("object"===Yt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ne(t){return(ne=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var re=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&$t(t,e)}(i,t);var e,n,r,o=te(i);function i(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(e=o.call(this)).toJSON=v("pitches","duration","tuplet","tie","beginSlurs","endSlurs","lyric"),e.name="chord","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new Q(t)):(e.pitches=t.pitches.map((function(t){return new st(t)})),e.duration=new bt(t.duration),t.tie&&(e.tie=new jt(t.tie)),t.beginSlurs&&(e.beginSlurs=t.beginSlurs.map((function(t){return new Dt(t)}))),t.endSlurs&&(e.endSlurs=t.endSlurs.map((function(t){return new Dt(t)}))),t.tuplet&&(e.tuplet=t.tuplet),t.lyrics&&(e.lyrics=t.lyrics.map((function(t){return new Lyric(t)})))),e}return e=i,(n=[{key:"parse",value:function(t){for(this.pitches=[];t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new Dt(t));for(;t.is("[");)this.tuplet=new Gt(t);for(t.token("<");t.is("pitch");)this.pitches.push(new st(t));for(t.token(">"),this.duration=new bt(t),t.is("~")&&(this.tie=new jt(t));t.is("tuplet-end");)this.tuplet=new Gt(t);for(t.is("~")&&(this.tie=new jt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new Dt(t))}},{key:"defaultOnplay",value:function(){this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.beginSlurs,n=this.endSlurs,r=this.tuplet,o=this.duration,i=this.tie;return e&&t.push(e.join("")),r&&"begin"===r.type&&t.push("[".concat(o.modification.actual,":")),t.push("<".concat(this.pitches.join(""),">").concat(this.duration)),r&&"end"===r.type&&t.push(":]"),n&&t.push(n.join("")),i&&t.push(this.tie),t.join("")}}])&&_t(e.prototype,n),r&&_t(e,r),i}(Y);function oe(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ie=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("placement","words","wedge","dynamics"),this.name="direction","lexer"===e.name)this.parse(e);else if("string"==typeof e)this.parse(new Q(e));else{this.placement=e.placement;var n=e.words,r=e.wedge,o=e.dynamics;n&&(this.words=n),r&&(this.wedge=r),o&&(this.dynamics=o)}}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("/\\",(function(t){e.placement="/"===t?"above":"below"})),t.is("wedge")?(t.token("wedge"),t.token("("),t.token("words",(function(t){e.wedge=t.trim()})),t.token(")")):t.is("dynamics")?t.token("dynamics",(function(t){e.dynamics=t})):t.is("words")&&t.prevent("note").token("words",(function(t){e.words=t.trim()}))}},{key:"toString",value:function(){var t=[],e=this.placement,n=this.words,r=this.wedge,o=this.dynamics;return t.push("above"===e?"/":"\\"),n&&t.push(n),r&&t.push("wedge(".concat(r,")")),o&&t.push(o),t.join("")}}])&&oe(e.prototype,n),r&&oe(e,r),t}();function ae(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var se=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("data"),this.name="layer","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.data=e.data.map((function(t){switch(t.name){case"note":return new Kt(t);case"rest":return new Zt(t);case"chord":return new re(t);case"direction":return new ie(t);default:throw new Error("Music data: ".concat(t))}}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("note"))this.data.push(new Kt(t));else if(t.is("rest"))this.data.push(new Zt(t));else if(t.is("chord"))this.data.push(new re(t));else if(t.is("direction"))this.data.push(new ie(t));else{if(t.is("|")){t.token("|"),t.skipWhite();break}if(t.is(">"))break;t.error("music data in layer")}t.skipWhite()}}},{key:"toString",value:function(){return this.data.join(" ")}}])&&ae(e.prototype,n),r&&ae(e,r),t}();function ue(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ce=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("layers"),this.name="multipart","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.layers=e.layers.map((function(t){return new se(t)}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.layers=[],t.token("<"),t.skipWhite();!t.is(">")&&!t.eof;)this.layers.push(new se(t));t.token(">")}},{key:"toString",value:function(){return"<".concat(this.layers.join(" | "),">")}}])&&ue(e.prototype,n),r&&ue(e,r),t}();function fe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function le(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var he=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{value:"|"};fe(this,t),this.toJSON=v("value"),this.name="bar","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("bar",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&le(e.prototype,n),r&&le(e,r),t}();function ye(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var pe=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("sign","line"),this.name="clef","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.sign=e.sign,this.line=e.line)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return"clef(".concat(this.sign).concat(this.line,")")}}])&&ye(e.prototype,n),r&&ye(e,r),t}();function de(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ve=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v(),this.name="solfege-key","lexer"===e.name?this.parse(e):"string"==typeof e&&this.parse(new Q(e))}var e,n,r;return e=t,r=[{key:"fromKey",value:function(t){}}],(n=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return""}}])&&de(e.prototype,n),r&&de(e,r),t}();function be(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var me=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("fifths","mode"),this.name="key","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.fifths=e.fifths,this.mode=e.mode)}var e,n,r;return e=t,(n=[{key:"solfedge",get:function(){return ve.fromKey(this)}},{key:"parse",value:function(t){}},{key:"toString",value:function(){return"key(".concat(this.fifths).concat(this.mode,")")}}])&&be(e.prototype,n),r&&be(e,r),t}();function we(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ge(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Oe={bb:-2,b:-1,n:0,"":0,"#":1,"##":2},Se=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{data:[]};we(this,t),this.toJSON=v("data","leftBar","rightBar"),this.name="cell","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.data=e.data.map((function(t){switch(t.name){case"time":return new H(t);case"note":return new Kt(t);case"rest":return new Zt(t);case"chord":return new re(t);case"multipart":return new ce(t);case"direction":return new ie(t);case"bar":return new he(t);case"clef":return new pe(t);case"key":return new me(t);case"sound":return t;default:throw new Error("Music data: ".concat(t))}})),this.setAlters(),this.setModifications(),this.linkTuplets(),this.extractBars()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("time"))this.data.push(new H(t));else if(t.is("note"))this.data.push(new Kt(t));else if(t.is("rest"))this.data.push(new Zt(t));else if(t.is("chord"))this.data.push(new re(t));else if(t.is("multipart"))this.data.push(new ce(t));else if(t.is("direction"))this.data.push(new ie(t));else if(t.is("bar")){if(this.data.push(new he(t)),this.data.length>1){t.skipWhite();break}}else{if(t.is("==")||t.is("--"))break;t.error("music data in cell")}t.skipWhite()}}},{key:"setAlters",value:function(){var t={1:"",2:"",3:"",4:"",5:"",6:"",7:""},e=function(e){var n=e.step,r=e.accidental;r&&(t[n]=r),e.alter=Oe[t[n]]};this.data.forEach((function(t){switch(t.name){case"note":return e(t.pitch);case"chord":return t.pitches.forEach(e);case"multipart":return}}))}},{key:"setModifications",value:function(){var t,e;this.data.forEach((function(n){var r=n.tuplet,o=n.duration;r&&"begin"===r.type&&(t=r.actual,e=r.normal),o&&t&&(o.modification={actual:t,normal:e}),r&&"end"===r.type&&(t=void 0,e=void 0)}))}},{key:"linkTuplets",value:function(){var t={};this.data.forEach((function(e){var n=e.tuplet;n&&("start"===n.type?t=n:t.next=n)}))}},{key:"extractBars",value:function(){var t=this.data;t.length?(this.rightBar="bar"===a(t).name?t.pop():new he("|"),this.leftBar=0===t.length||"bar"!==t[0].name?new he("|"):t.shift()):(this.leftBar=new he("|"),this.rightBar=new he("|"))}},{key:"toString",value:function(){var t=[],e=[];return this.data.concat(this.rightBar).forEach((function(n){if("dummy"!==n.name){var r=n.duration;if(!r||r.type<8)return t.push(n);var o=r.beams;o.some((function(t){return"single"!==t.type}))?e.push(n):t.push(n),e.length>0&&!o.some((function(t){return"begin"===t.type||"continue"===t.type}))&&(t.push(e.join("")),e.length=0)}})),t.join(" ")}}])&&ge(e.prototype,n),r&&ge(e,r),t}();function ke(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var je={"@":"at","+":"forward","-":"backward"},xe=p(je),Pe=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("measureAmount","typeData","noteAmount"),this.name="lyric-control","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.instruction=e.instruction,this.measureAmount=e.measureAmount,this.typeData=e.typeData,this.noteAmount=e.noteAmount)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("lyric-control-symbol",(function(t){e.instruction=je[t]})),t.is("digits")?(this.type="note",t.token("digits",(function(t){e.amount=+t}))):t.is("m")?(this.type="measure",t.token("m"),t.token("digits",(function(t){e.amount=+t}))):t.error("lyric-control parameters")}},{key:"toString",value:function(){var t=xe[this.instruction];return"note"===this.type?t+=this.amount:"measure"===this.type&&(t+="m".concat(this.amount)),t}}])&&ke(e.prototype,n),r&&ke(e,r),t}();function Le(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ee=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v(),this.name="lyrics","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.list=e.list.map((function(t){return new Wt(t)})),this.list.forEach((function(t,e){"begin"!==t.syllabic&&"middle"!==t.syllabic||(t.next=n.list[e+1])}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e,n;for(t.token("lyrics-head"),t.skipWhite(),this.list=[];(t.is("lyric")||t.is("lyric-control"))&&(t.is("lyric")?(e=new Wt(t,n),this.list.push(e),n=e):this.list.push(new Pe(t)),t.skipWhite(),!t.is("lyrics-head")););}},{key:"toString",value:function(){}}])&&Le(e.prototype,n),r&&Le(e,r),t}();function Re(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ae=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name="dummy",Object.assign(this,e)}var e,n,r;return e=t,(n=[{key:"toString",value:function(){return"[[Dummy]]"}}])&&Re(e.prototype,n),r&&Re(e,r),t}();function De(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Te=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=v("cells"),this.name="staff","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):this.cells=e.cells.map((function(t){return new Se(t)})),this.resetLeftBars(),this.setBeams(),this.linkTies(),this.linkSlurs(),this.setT(),this.lyricsLines&&this.placeLyrics()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.cells=[],t.is("--")&&(t.token("--"),t.skipSS(),t.eol||t.error("Unexpected token")),t.skipWhite();t.is("cell");)this.cells.push(new Se(t)),t.skipWhite();for(;t.is("lyrics-head");)this.lyricsLines=this.lyricsLines||[],this.lyricsLines.push(new Ee(t))}},{key:"resetLeftBars",value:function(){var t=this.cells;t.forEach((function(e,n){n>0&&(e.leftBar.value=t[n-1].rightBar.value)}))}},{key:"setBeams",value:function(){this.makeBeamGroups().forEach((function(t){t.forEach((function(e,n){e.duration.beams.forEach((function(e,r){var o=t[n-1]&&t[n-1].duration.beams[r],i=t[n+1]&&t[n+1].duration.beams[r];o&&i?e.type="continue":o?e.type="end":i&&(e.type="begin")}))})),t.forEach((function(e,n){e.duration.beams.forEach((function(e,r){if("begin"===e.type)for(var o=n+1;o<t.length;o++){var i=t[o].duration.beams[r];i&&"end"===i.type&&(e.endBeam=i)}}))}))}))}},{key:"makeBeamGroups",value:function(){var t=0,e=[];return this.cells.forEach((function(n){var r=function(){i.length&&(e.push(i),i=[])},o=0,i=[];n.data.forEach((function(e){if("time"===e.name)return t=Ne(e),o=0,void r();if(t&&e.duration){var n=e.duration,a=n.type,s=n.quartersQ;o+=s,a<8?(r(),o%=t):(o<=t&&i.push(e),o>=t&&(o=0,r()))}})),r()})),e}},{key:"linkTies",value:function(){var t=this;this.cells.forEach((function(e,n){e.data.forEach((function(r,o){if(r.tie){var i=r.tie.type;if("begin"===i||"continue"===i){var a=function(e,n){var r;do{var o=t.cells[e];if(n++,!(r=o.data[n])){if(e++,n=0,!(o=t.cells[e]))break;r=o.data[n]}if(r){if("note"===r.name||"chord"===r.name)return{ndt:r,ncell:o};if("rest"===r.name)break}}while(r);return{}}(n,o),s=a.ndt,u=a.ncell;if(!s||!Be(r,s))return;var c=function(t,n,r,o){t&&n&&(t.tie?"end"===t.tie.type&&(t.tie.type="continue"):t.tie=new jt({type:"begin"}),n.tie=new jt({type:n.tie?"continue":"end",cell:u}),t.tie.cell=e,t.tie.note=r,t.tie.nextNote=o,"pitch"===n.name&&(t.tie.nextPitch=n),t.tie.next=n.tie,n.tie.note=o,n.tie.prevNote=r,"pitch"===t.name&&(n.tie.prevPitch=t),n.tie.prev=t.tie,"pitch"===t.name&&"note"===n.name?(r.tie.cell=e,r.tie.note=r,r.tie.nextNote=o,r.tie.next=o.tie):"note"===t.name&&n.name)};switch(r.name){case"note":switch(s.name){case"note":c(r,s,r,s);break;case"chord":var f=ze(s.pitches,r.pitch);c(r,f,r,s)}break;case"chord":switch(s.name){case"note":var l=ze(r.pitches,s.pitch);c(l,s,r,s);break;case"chord":Fe(r.pitches,s.pitches).forEach((function(t){var e=t.curr,n=t.next;return c(e,n,r,s)})),c(r,s,r,s)}}}}}))}))}},{key:"linkSlurs",value:function(){var t=this;this.cells.forEach((function(e,n){e.data.forEach((function(r,o){if(r.beginSlurs)for(var i=Ce(t.cells,n,o),a=i(),s=a.ncell,u=a.ndt;u;){if(u.endSlurs){r.beginSlurs[0].cell=e,r.beginSlurs[0].nextNote=u,r.beginSlurs[0].next=u.endSlurs[0],u.endSlurs[0].cell=s,u.endSlurs[0].prevNote=r,u.endSlurs[0].prev=r.beginSlurs[0];break}var c=i();u=c.ndt,s=c.ncell}}))}))}},{key:"setT",value:function(){var t=0,e=0;this.cells.forEach((function(n){var r=0,o=0;n.data.forEach((function(n){n.t=t,n.tQ=e,n.tc=r,n.tcQ=o;var i=n.duration;if(i){var a=i.quarters*(60/90);i.seconds=a,t+=a,e+=i.quartersQ,r+=a,o+=i.quartersQ}}))}))}},{key:"placeLyrics",value:function(){var t=this;this.lyricsLines.forEach((function(e,n){for(var r=!1,o=!1,i=0;i<t.cells.length;i++)for(var a=t.cells[i],s=0;s<a.data.length;s++){var u=a.data[s];if(!u)break;if(!u.tie||"begin"===u.tie.type){var c=e.list[0];if(c&&"lyric-control"===c.name){var f=e.list.shift(),l=new Ae({lyrics:[]});l.lyrics[n]=f,a.data.splice(s,0,l);var h=f.instruction,y=f.type,p=f.amount;if("at"===h){if("measure"===y){i=p-2;break}if("note"===y){s=p-1;continue}}else if("forward"===h){if("measure"===y){i+=p-1;break}if("note"===y){s+=p;continue}}else if("backward"===h){if("measure"===y){i-=p+1;break}if("note"===y){s-=p,o=!0;continue}}}if((!r||o)&&("note"===u.name||"chord"===u.name)){o=!1;var d=e.list.shift();d&&(u.lyrics=u.lyrics||[],u.lyrics[n]=d)}u.endSlurs&&(r=!1),u.beginSlurs&&(r=!0)}}})),delete this.lyricsLines}},{key:"toString",value:function(){var t=this.cells.join(" "),e=[[]];this.cells.forEach((function(t){t.data.forEach((function(t){t.lyrics&&t.lyrics.forEach((function(t,n){e[n]=e[n]||[],e[n].push(t)}))}))}));var n=e.map((function(t){return t.join(" ")})),r=[t];return n.forEach((function(t){t&&r.push("lyrics: "+t)})),r.join("\n\n")}}])&&De(e.prototype,n),r&&De(e,r),t}(),Ne=function(t){var e=t.beats,n=t.beatType;return 8===n?e%3==0?1.5*X:.5*X:X/n*4},Ce=function(t,e,n){return function(){for(var r,o;!o;)if(r=t[e],n++,!(o=r.data[n])){if(e++,n=0,!(r=t[e]))break;o=r.data[n]}return{ncell:r,ndt:o}}},Be=function(t,e){switch(t.name){case"note":switch(e.name){case"note":return e.pitch.midiNumber===t.pitch.midiNumber;case"chord":return e.pitches.some((function(e){return e.midiNumber===t.pitch.midiNumber}))}case"chord":switch(e.name){case"note":return t.pitches.some((function(t){return t.midiNumber===e.pitch.midiNumber}));case"chord":return t.pitches.some((function(t,n){return e.pitches.some((function(e){return t.midiNumber===e.midiNumber}))}))}}},ze=function(t,e){for(var n=0;n<t.length;n++)if(t[n].midiNumber===e.midiNumber)return t[n]},Fe=function(t,e){var n=[];return t.forEach((function(t){e.forEach((function(e){t.midiNumber===e.midiNumber&&n.push({curr:t,next:e})}))})),n};function Me(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ge(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Qe=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{staves:[]};Me(this,t),this.toJSON=v("head","staves"),this.name="part","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(this.head=new U(e.head),this.staves=e.staves.map((function(t){return new Te(t)})))}var e,n,r;return e=t,(n=[{key:"isEmpty",get:function(){return 1===this.staves.length&&0===this.staves[0].cells.length}},{key:"parse",value:function(t){this.head=t.is("part-head")?new U(t):new U,this.staves=[],t.skipWhite();do{this.staves.push(new Te(t))}while(t.is("--"));t.skipWhite()}},{key:"stavesStr",value:function(){return this.staves.join("\n\n--\n")}},{key:"singlePartToString",value:function(){return""+this.head=="=="?this.stavesStr():this.toString()}},{key:"toString",value:function(){return this.head+"\n"+this.stavesStr()}}])&&Ge(e.prototype,n),r&&Ge(e,r),t}();function We(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Je(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var qe=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};We(this,t),this.toJSON=v("parts","leftBar","rightBar"),this.name="measure",this.parts=e.parts,this.cells=this.mapCell((function(t){return t})),this.partIndices=this.mapCell((function(t,e,n,r){return r})),this.setPartsToCellsIndices()}var e,n,r;return e=t,(n=[{key:"setPartsToCellsIndices",value:function(){var t=this;this.partsToCellsIndices=f(this.parts.length).map((function(){return[]})),this.eachCell((function(e,n,r,o){return t.partsToCellsIndices[o].push(n)}))}},{key:"eachCell",value:function(t){var e=0;this.parts.forEach((function(n,r){n.staves.forEach((function(n,o){t(n,e,o,r),e++}))}))}},{key:"mapCell",value:function(t){var e=[];return this.eachCell((function(n,r,o,i){return e.push(t(n,r,o,i))})),e}}])&&Je(e.prototype,n),r&&Je(e,r),t}();function Ie(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ve(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ue=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};Ie(this,t),this.toJSON=v("parts","measures"),this.name="body","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Q(e)):(e.parts||(e.parts=[]),this.parts=e.parts.map((function(t){return new Qe(t)}))),this.fillStaves(),this.makeMeasures()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e;this.parts=[];do{(e=new Qe(t)).isEmpty||this.parts.push(e)}while(t.is("part-head"))}},{key:"eachStaff",value:function(t){this.parts.forEach((function(e,n){e.staves.forEach((function(e,r){return t(e,r,n)}))}))}},{key:"mapStaff",value:function(t){var e=[];return this.eachStaff((function(n,r,o){return e.push(t(n,r,o))})),e}},{key:"fillStaves",value:function(){var t=Math.max.apply(null,this.mapStaff((function(t){return t.cells.length})));t<=0||this.eachStaff((function(e){if(e.cells.length!==t){var n=t-e.cells.length;e.cells=e.cells.concat(f(n).map((function(){return new Se})))}}))}},{key:"makeMeasures",value:function(){if(this.parts.length){var t=this.parts[0].staves[0].cells.length,e=f(t).map((function(){return{parts:[]}}));this.eachStaff((function(t,n,r){e.forEach((function(e,o){e.parts[r]=e.parts[r]||{};var i=e.parts[r];i.staves=i.staves||[],i.staves[n]=t.cells[o]}))})),this.measures=e.map((function(t){return new qe(t)}))}else this.measures=[]}},{key:"toString",value:function(){return 1===this.parts.length?this.parts[0].singlePartToString():this.parts.join("\n\n")}}])&&Ve(e.prototype,n),r&&Ve(e,r),t}();function Xe(t){return(Xe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ke(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function He(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ze(t,e,n){return e&&He(t.prototype,e),n&&He(t,n),t}var Ye=T({"<":"<",">":">","</":"<\\/","/>":"\\/>","=":"=",'"':'"',"<?xml":"<\\?xml","?>":"\\?>","<!Doctype":"<![Dd][Oo][Cc][Tt][Yy][Pp][Ee]","\x3c!--":"\x3c!--","--\x3e":"--\x3e",name:"[a-z_-]+"}),_e=function(){function t(e){Ke(this,t),this.toJSON=v("xmlDecl","doctype","root"),this.name="document","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Ye(e)):(e.xmlDecl&&(this.xmlDecl=new $e(e.xmlDecl)),e.doctype&&(this.doctype=new tn(e.doctype)),this.root=new en(e.root))}return Ze(t,[{key:"parse",value:function(t){for(t.skipWhite(),t.is("<?xml")&&(this.xmlDecl=new $e(t)),t.is("<!Doctype")&&(this.doctype=new tn(t));!t.eof;)t.is("\x3c!--")?new rn(t):this.root=new en(t)}},{key:"toString",value:function(){var t=[];return this.xmlDecl&&t.push(this.xmlDecl),this.doctype&&t.push(this.doctype),t.push(this.root),t.join("\n")}}]),t}(),$e=function(){function t(e){Ke(this,t),this.toJSON=v("attrs"),this.name="xml-decl","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Ye(e)):this.attrs=new nn(e.attrs)}return Ze(t,[{key:"parse",value:function(t){t.token("<?xml"),t.skipWhite(),this.attrs=new nn(t),t.token("?>"),t.skipWhite()}},{key:"toString",value:function(){return"<?xml ".concat(this.attrs,"?>")}}]),t}(),tn=function(){function t(e){Ke(this,t),this.toJSON=v("value"),this.name="doctype","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Ye(e)):this.value=e.value}return Ze(t,[{key:"parse",value:function(t){var e=this;t.token("<!Doctype"),t.mlwithout(">",(function(t){e.value=t.trim()})),t.token(">"),t.skipWhite()}},{key:"toString",value:function(){return"<!Doctype ".concat(this.value,">")}}]),t}(),en=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;if(Ke(this,t),this.toJSON=v("elName","attrs","content"),this.name="element",this.level=r,this.indent=o,"lexer"===e.name)this.parse(e);else if("string"==typeof e)this.parse(new Ye(e));else{var i=e.elName,a=e.attrs,s=e.content;this.elName=i,this.attrs=new nn(a),this.content=[],Array.isArray(s)?s.forEach((function(e){n.content.push(new t(e,r+1,o))})):this.content=s}}return Ze(t,[{key:"parse",value:function(e){var n=this;if(this.content=[],e.token("<"),e.token("name",(function(t){n.elName=t})),e.skipWhite(),this.attrs=new nn(e),e.is("/>"))e.token("/>");else{for(e.token(">"),e.skipWhite();!e.eof;){if(e.is("</")){0===this.content.length&&(this.content="");break}e.is("\x3c!--")?new rn(e):e.is("<")?this.content.push(new t(e,this.level+1,this.indent)):e.mlwithout("<",(function(t){n.content=t.trim()})),e.skipWhite()}e.token("</"),e.skipWhite(),e.token("name",(function(t){n.elName!==t&&e.error("tagname mismatched")})),e.skipWhite(),e.token(">"),e.skipWhite()}}},{key:"eachChild",value:function(t){var e=this.content;if(!Array.isArray(e))return t(e,0);e.forEach(t)}},{key:"mapChild",value:function(t){var e=[];return this.eachChild((function(n,r){return e.push(t(n,r))})),e}},{key:"actContent",value:function(t){if(void 0!==this.content)return"string"==typeof this.content?t(this.content):void this.content.forEach((function(e){"element"===e.name&&t[e.elName]&&t[e.elName](e)}))}},{key:"hasAttr",get:function(){return this.attrs.hasAttr}},{key:"eachAttr",value:function(t){return this.attrs.each(t)}},{key:"mapAttr",value:function(t){return this.attrs.map(t)}},{key:"getAttr",value:function(t){if(this.attrs)return this.attrs.getAttr(t)}},{key:"actAttrs",value:function(t){this.attrs&&this.attrs.act(t)}},{key:"toString",value:function(){var t=this.level,e=this.indent,n=this.elName,r=this.attrs,o=this.content,a=[];return t>0&&a.push("\n"+i(" ",t*e)),a.push("<".concat(n)),r.hasAttr&&a.push(" "+r),Array.isArray(o)?0===o.length?a.push("/>"):(a.push(">",o.join("")),a.push("\n",i(" ",t*e),"</".concat(n,">"))):a.push(">".concat(o,"</").concat(n,">")),a.join("")}}]),t}(),nn=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Ke(this,t),this.toJSON=v("value"),this.name="attrs","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Ye(e)):this.value=e}return Ze(t,[{key:"parse",value:function(t){var e,n=this;for(this.value={};t.is("name");)t.token("name",(function(t){e=t})),t.skipWhite(),t.token("="),t.skipWhite(),t.token('"'),t.without('"',(function(t){n.value[e]=t})),t.token('"'),t.skipWhite();t.skipWhite()}},{key:"hasAttr",get:function(){return Object.keys(this.value).length>0}},{key:"getAttr",value:function(t){return this.value[t]}},{key:"setAttr",value:function(t,e){this.value[t]=value}},{key:"act",value:function(t){for(var e in this.value)t[e]&&t[e](this.value[e])}},{key:"each",value:function(t){var e=this.value;Object.keys(e).forEach((function(n,r){return t(e[n],n,r)}))}},{key:"map",value:function(t){var e=[];return this.each((function(n,r){return e.push(t(n,r))})),e}},{key:"toString",value:function(){var t=[];for(var e in this.value)t.push("".concat(e,'="').concat(this.value[e],'"'));return t.join(" ")}}]),t}(),rn=function(){function t(e){Ke(this,t),this.toJSON=v("value"),this.name="comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Ye(e)):this.value=e.value}return Ze(t,[{key:"parse",value:function(t){var e=this;t.token("\x3c!--"),t.mlwithout("--\x3e",(function(t){e.value=t})),t.token("--\x3e"),t.skipWhite()}},{key:"toString",value:function(){return"\x3c!--".concat(this.value,"--\x3e")}}]),t}(),on=function(t,e,n){return(Array.isArray(e)||"object"!==Xe(e))&&(n=e,e={}),Array.isArray(n)&&(n=o(n)),{name:"element",elName:t,attrs:e,content:n}};window.crossOctave=0;var an,sn={C:1,D:2,E:3,F:4,G:5,A:6,B:7},un={"-2":"bb","-1":"b",0:"n",1:"#",2:"##"},cn=h([1,2,4,8,16,32,64,128,256,512,1024]),fn={maxima:.125,long:.25,breve:.5,whole:1,half:2,quarter:4,eighth:8,"16th":16,"32nd":32,"64th":64,"128th":128,"256th":256,"512th":512,"1024th":1024};var ln=function(t,e){t.actContent({"credit-words":function(t){switch(t.getAttr("justify")){case"center":e.title=e.title||t.content;break;case"right":e.composer=e.composer||t.content;break;case"left":e.lyricist=e.lyricist||t.content}}})},hn=function(t){var e=[];return t.actContent({"score-part":function(t){var n={name:"part",head:{name:"part-head"}};t.actContent({"part-name":function(t){n.head.partName=t.content},"part-abbreviation":function(t){n.head.abbreviation=t.content},"midi-instrument":function(t){var e=n.head.midi={};t.actContent({"midi-channel":function(t){e.channel=+t.content},"midi-program":function(t){e.program=+t.content},volume:function(t){e.volume=+t.content},pan:function(t){e.pan=+t.content}})}}),e.push(n)}}),e},yn=function(t,e){var n,r,o=function(){return e.staves.forEach((function(t){return t.cells.push({name:"cell",data:[]})}))},i=function(){return e.staves.map((function(t){return a(t.cells)}))};e.staves=[{name:"staff",cells:[]}],t.actContent({measure:function(t){o();var s,u=i();t.actContent({attributes:function(t){(n=vn(t)).key&&void 0!==n.key.fifths&&(window.keyFifths=n.key.fifths),n.divisions&&(an=n.divisions),n.staves>1&&(e.staves=function(t){for(var e=[],n=0;n<t;n++)e.push({name:"staff",cells:[]});return e}(n.staves),o(),u=i()),n.clefs&&u.forEach((function(t,e){return t.data.push(n.clefs[e])})),n.key&&u.forEach((function(t){return t.data.push(n.key)})),n.time&&u.forEach((function(t){return t.data.push(n.time)}))},direction:function(t){var e=t.getAttr("placement");e?r=e:e=r;var n=function(t){return Object.assign({name:"direction",placement:e},t)};t.actContent({"direction-type":function(t){return t.actContent({words:function(t){u[0].data.push(n({words:t.content}))},wedge:function(t){u[0].data.push(n({wedge:t.getAttr("type")}))},dynamics:function(t){u[0].data.push(n({dynamics:t.content[0].elName}))},metronome:function(t){var e=0;e&&(e=1),u[0].data.push({name:"direction",beat_unit_dot:e})}})}})},note:function(t){var e=gn(t),n=u[e.staff];e.chord&&e.staff===s&&n.data.length?xn(a(n.data),e):n.data.push(e),s=e.staff,delete e.staff},sound:function(t){var e=gn(t),n=u[e.staff],r=t.attrs.value.tempo;n.data.push({name:"sound",value:r})},barline:function(t){return u.forEach((function(e){return e.data.push(pn(t))}))}}),u.forEach((function(t){dn(t);var e=a(t.data);e&&"bar"===e.name||t.data.push({name:"bar",value:"|"})}))}});for(var s=0,u=0,c=1,f=0,l=0;l<e.staves[0].cells.length&&!(u>0);l++)for(var h=0;h<e.staves[0].cells[l].data.length;h++)if("sound"===e.staves[0].cells[l].data[h].name){u=e.staves[0].cells[l].data[h].value;break}return e.staves[0].cells.forEach((function(t){t.data.forEach((function(t){"time"===t.name&&(s=t.beatType),"sound"===t.name&&(u=t.value),"rest"!==t.name&&"note"!==t.name||(t.noteTime=t.duration.quarters*(s/4)*(60/u),t.startTime=f,t.endTime=f+t.noteTime,t.id=c,f=t.endTime,c++)}))})),window.cells=JSON.parse(JSON.stringify(e.staves[0].cells)),e},pn=function(t){var e={name:"bar",value:"|"};return t.actContent({"bar-style":function(t){switch(t.content){case"light-heavy":return void(e.value="|]");case"light-light":return void(e.value="||")}},repeat:function(t){switch(t.getAttr("direction")){case"forward":return void(e.value="|:");case"backward":return void(e.value=":|")}}}),e},dn=function(t){var e,n=function(t){"alter"in t&&t.alter!==r[t.step]&&(t.accidental=un[t.alter],e[t.step]=t.alter)},r={1:0,2:0,3:0,4:0,5:0,6:0,7:0};t.data.forEach((function(t){switch(e={},t.name){case"note":n(t.pitch);break;case"chord":t.pitches.forEach(n)}Object.assign(r,e)}))},vn=function(t){var e={};return t.actContent({divisions:function(t){e.divisions=+t.content},clef:function(t){e.clefs=e.clefs||[],e.clefs.push(bn(t))},key:function(t){e.key=mn(t)},time:function(t){e.time=wn(t)},staves:function(t){e.staves=+t.content}}),e},bn=function(t){var e={name:"clef"};return t.actContent({sign:function(t){e.sign=t.content},line:function(t){e.line=+t.content}}),e},mn=function(t){var e={name:"key"};return t.actContent({fifths:function(t){e.fifths=+t.content},mode:function(t){e.mode=t.content}}),e},wn=function(t){var e={name:"time"};return t.actContent({beats:function(t){e.beats=+t.content},"beat-type":function(t){e.beatType=+t.content}}),e},gn=function(t){var e={name:"note",duration:{name:"duration",dot:0,quarters:0},staff:0},n=e.duration;return t.actContent({accidental:function(t){e.accidental="sharp"},rest:function(){e.name="rest"},chord:function(){e.chord=!0},pitch:function(n){e.pitch=Dn(n,t)},duration:function(t){return Object.assign(n,jn(t))},type:function(t){n.type||(n.type=fn[t.content])},"time-modification":function(t){n.modification=kn(t)},notations:function(t){return t.actContent({articulations:function(t){e.articulations=On(t)},slur:function(t){e.slurs=e.slurs||[],e.slurs.push({type:t.getAttr("type")})},tuplet:function(t){return e.tuplet={type:t.getAttr("type")}}})},tie:function(t){"start"===t.getAttr("type")&&(e.duration.tie=!0,e.tie={type:"begin"})},lyric:function(t){e.lyrics=e.lyrics||[],e.lyrics.push(Sn(t))},staff:function(t){e.staff=t.content-1}}),e},On=function(t){var e=[];return t.actContent({staccato:function(t){return e.push(t.elName)}}),e},Sn=function(t){var e={};return t.actContent({syllabic:function(t){return e.syllabic=t.content},text:function(t){return e.text=t.content}}),e},kn=function(t){var e={};return t.actContent({"actual-notes":function(t){e.actual=+t.content},"normal-notes":function(t){e.normal=+t.content}}),e},jn=function(t){var e=+t.content/an,n=4/e;return cn[n]?{type:n,quarters:e}:cn[n*=1.5]?{type:n,dot:1,quarters:e}:cn[n*=1.75]?{type:n,dot:2,quarters:e}:void 0},xn=function(t,e){"note"===t.name&&(t.name="chord",t.pitches=[t.pitch],delete t.pitch),t.pitches.push(e.pitch)};var Pn={0:"C",1:"G",2:"D",3:"A",4:"E",5:"B",6:"#F","-1":"F","-2":"bB","-3":"bE","-4":"bA","-5":"bD","-6":"#F"},Ln={C:0,G:7,D:2,A:9,E:4,B:11,"#F":6,F:5,bB:10,bE:3,bA:8,bD:1},En={"-6":6,1:7,"-4":8,3:9,"-2":-2,5:-1,0:0,"-5":-11,2:2,"-3":-9,4:4,"-1":5,6:6},Rn={1:0,2:2,3:4,4:5,5:7,6:9,7:11},An={0:"1",1:"1",2:"2",3:"2",4:"3",5:"4",6:"4",7:"5",8:"5",9:"6",10:"6",11:"7"},Dn=function(t,e){for(var n=window.keyFifths,r={name:"pitch",accidental:""},o=0,i=0,a=0,s="",u=0;u<e.content.length;u++)"accidental"===e.content[u].elName&&(s=e.content[u].content);for(u=0;u<t.content.length;u++)"octave"===t.content[u].elName&&(i=1*t.content[u].content),"step"===t.content[u].elName&&(o=t.content[u].content),"alter"===t.content[u].elName&&(a=1*t.content[u].content);var c=0;"sharp"===s?c=1:"flat"===s?c=-1:"flat-flat"===s?c=-2:"double-sharp"===s?c=2:"natural"===s&&(c=1);var f,l=12*(i+1)+Rn[sn[o]]+a,h=60+En[n],y=l-Ln[Pn[""+n]],p=Math.floor(y/12),d=l-h;return p=Math.floor(d/12),d<0&&(d=d%12+12),d>0&&(d%=12),f=An[d],t.actContent({step:function(t){r.step=f},alter:function(t){r.alter=0===window.keyFifths?+t.content:c},octave:function(t){r.octave=p}}),r},Tn={1:"C",2:"D",3:"E",4:"F",5:"G",6:"A",7:"B"},Nn=function(){var t,e=this.head,n=(this.body,e.title),r=e.composer;return new _e({xmlDecl:{attrs:{version:"1.0",encoding:"UTF-8",standalone:"no"}},doctype:{value:'score-partwise PUBLIC\n    "-//Recordare//DTD MusicXML 3.1 Partwise//EN"\n    "http://www.musicxml.org/dtds/partwise.dtd"'},root:on("score-partwise",{version:"3.1"},[n?on("movement-title",n):[],on("identification",[r?on("creator",{type:"composer"},r):[]]),on("part-list",[on("score-part",{id:"P1"},[on("part-name","Music")])]),on("part",{id:"P1"},[on("measure",{number:1},[on("attributes",[on("divisions",1),on("key"),on("time"),on("clef")]),on("note",[(t={step:2,alter:1,octave:1},on("pitch",[on("step",Tn[t.step]),on("alter",t.alter),on("octave",t.octave+4)])),on("duration",4),on("type","whole")])])])])}).toString()},Cn=[];function Bn(){var t=this.objInPr,e=this.context;switch(t.name){case"score":qn(t,e);break;case"part":In(t,e);break;case"staff":Vn(t,e);break;case"cell":Un(t,e);break;case"note":Xn(t,e)}}function zn(){}function Fn(){Cn.forEach(clearTimeout),Cn.length=0}var Mn=function(t,e,n,r,o){var i=o.currentTime,a=o.createGain();a.connect(o.destination);a.gain.setValueAtTime(0,t+i),a.gain.linearRampToValueAtTime(1,t+i+.05),a.gain.linearRampToValueAtTime(1,t+i+n-.05),a.gain.linearRampToValueAtTime(0,t+i+n-.01);var s=o.createOscillator(),u=0;e&&(u=e),s.frequency.value=u,s.type="square",s.connect(a),s.start(i+t),s.stop(i+t+n),r&&(s.onended=r)},Gn=function(t){var e=t.dt,n=t.pitch,r=[{dt:e,pitch:n}],o=function(){var t=(n||e).tie;e=t.nextNote,n=t.nextPitch};for(o();e;)r.push({dt:e,pitch:n}),o();return r},Qn=function(t,e,n){e.forEach((function(t){var e=t.dt,n=t.pitch;n?n.onplay():e.onplay()}));var r=c(e.map((function(t){var e=t.dt;return Jn(e)})));Mn(0,t.frequency,r,(function(){return e.forEach((function(t){var e=t.dt,n=t.pitch;n?n.onstop():e.onstop()}))}),n)},Wn=function(t){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onplay()}));var e=c(t.map((function(t){var e=t.dt;return Jn(e)})));setTimeout((function(){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onstop()}))}),1e3*e)},Jn=function(t){return t.duration.seconds},qn=function(t,e){t.body.parts.forEach((function(t){return In(t,e)}))},In=function(t,e){t.staves.forEach((function(t){return Vn(t,e)}))},Vn=function(t,e){t.cells.forEach((function(t){t.data.forEach((function(t){switch(t.name){case"note":return Xn(t,e);case"chord":return Hn(t,e)}}))}))},Un=function(t,e){t.data.forEach((function(t){switch(t.name){case"note":Xn(t,e);break;case"rest":break;case"chord":Hn(t,e)}}))},Xn=function(t,e){var n=t.pitch;t.duration;Cn.push(setTimeout((function(){console.log("play: ".concat(t),n.frequency);var r=t.tie;if(r){if("begin"!==r.type)return;var o=Gn({dt:t});Qn(n,o,e),Wn(o)}else{t.onplay();var i=Jn(t);Mn(0,Kn(t),i,(function(){return t.onstop()}),e)}}),1e3*t.t))},Kn=function(t){return 440*Math.pow(2,(t-69)/12)},Hn=function(t,e){var n=Jn(t);Cn.push(setTimeout((function(){if(t.tie&&"begin"===t.tie.type){var r=Gn({dt:t});Wn(r)}else t.onplay(),setTimeout((function(){return t.onstop()}),1e3*Jn(t));t.pitches.forEach((function(r){if(r.tie){if("begin"!==r.tie.type)return;var o=Gn({dt:t,pitch:r});Qn(r,o,e)}else r.onplay(),Mn(0,r.frequency,n,(function(){return r.onstop()}),e)}))}),1e3*t.t))};function Zn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Yn,_n=window.AudioContext||window.webkitAudioContext,$n=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.playInPr=Bn,this.pauseInPr=zn,this.stopInPr=Fn,this.objInPr=e}var e,n,r;return e=t,(n=[{key:"context",get:function(){return Yn||(Yn=new _n)}}])&&Zn(e.prototype,n),r&&Zn(e,r),t}();function tr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function er(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function nr(t,e,n){return e&&er(t.prototype,e),n&&er(t,n),t}var rr=function(t){var e=t.split("-");return e.shift()+e.map((function(t){return t[0].toUpperCase()+t.substr(1)})).join("")},or=T({names:"[a-zA-Z\\d\\-, ]+",name:"[a-z\\-]+",string:"[a-zA-Z][a-zA-z\\d ]+",number:"[\\d\\.]+",unit:"(%|px)","{":"{",":":":","}":"}"}),ir=function(){function t(e,n,r){tr(this,t),this.value=e,this.unit=n,this.factors=r}return nr(t,[{key:"pxValue",get:function(){return"px"===this.unit?this.value:this.value*this.factors.baseSize/100}}]),t}(),ar=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};tr(this,t),this.name="style",this.factors=n,this.rawValue={},this.parse(new or(e))}return nr(t,[{key:"parse",value:function(t){var e,n=this;t.skipWhite();for(var r=function(){t.token("names",(function(t){e=t.replace(/ +/g,"").split(",").map(rr)})),e.forEach((function(t){n.rawValue[t]=n.rawValue[t]||{}})),t.skipSS(),t.token("{"),t.nextLine();var r=void 0;do{(r=n.getNameValue(t))&&e.forEach((function(t){n.rawValue[t][r.name]=r.value}))}while(r);t.token("}"),t.skipWhite()};!t.eof;)r()}},{key:"getNameValue",value:function(t){var e,n,r;if(t.skipSS(),t.is("name"))return t.token("name",(function(t){e=rr(t)})),t.skipSS(),t.token(":"),t.skipSS(),t.is("string")?t.token("string",(function(t){n=t.trim(),/ /.test(n)&&(n='"'.concat(n,'"'))})):t.is("number")&&(t.token("number",(function(t){n=+t})),t.optional("unit",(function(t){r=t})),r&&(n=new ir(n,r,this.factors))),t.skipSS(),t.eof||t.nextLine(),{name:e,value:n}}},{key:"value",get:function(){var t=this.rawValue;this.factors.baseSize=t.base.size.pxValue;var e=function(t){return t instanceof ir?t.pxValue:t},n={};for(var r in t){n[r]={};var o=t[r].size;for(var i in o&&(o=o.pxValue),t[r])switch(i){case"widthRatio":n[r].width=e(t[r][i]*o);break;case"heightRatio":n[r].height=e(t[r][i]*o);break;case"dxRatio":n[r].dx=e(t[r][i]*o);break;case"dyRatio":n[r].dy=e(t[r][i]*o);break;default:n[r][i]=e(t[r][i])}}return n}},{key:"add",value:function(e){var n=this,r=new t(e,this.factors).rawValue;Object.keys(r).forEach((function(t){var e=r[t];Object.assign(n.rawValue[t],e)}))}}]),t}(),sr="base {\n  size: 20px\n}\n\ntitle-font {\n  family: Times New Roman\n  size: 120%\n  height-ratio: 0.9\n  dy-ratio: 0.75\n}\nsubtitle-font {\n  family: Times New Roman\n  size: 110%\n  width-ratio: 0.45\n  height-ratio: 0.9\n  dy-ratio: 0.8\n}\ncreator-font {\n  family: Times New Roman\n  size: 100%\n  width-ratio: 0.45\n  height-ratio: 0.9\n  dy-ratio: 0.8\n}\npart-name-font {\n  family: Times New Roman\n  size: 80%\n  width-ratio: 0.45\n  height-ratio: 0.9\n  dy-ratio: 0.8\n}\ntime-font {\n  family: Cadence\n  size: 100%\n  width-ratio: 0.45\n  height-ratio: 0.52\n  dy-ratio: 0.51\n}\nstep-font, rest-font {\n  family: Times New Roman\n  size: 100%\n  width-ratio: 0.45\n  height-ratio: 0.69\n  dy-ratio: 0.68\n}\naccidental-font {\n  family: Cadence\n  size: 90%\n  width-ratio: 0.3\n  height-ratio: 0.75\n  dx-ratio: 0.3\n  dy-ratio: 0.39\n  lift: 25%\n}\ntuplet-font {\n  family: Times New Roman\n  size: 90%\n  height-ratio: 0.9\n  dy-ratio: 0.75\n}\ndirection-font {\n  family: Times New Roman\n  size: 70%\n  height-ratio: 0.9\n  dy-ratio: 0.5\n}\ndynamics-font {\n  family: Cadence\n  size: 100%\n  width-ratio: 0.45\n  height-ratio: 0.52\n  dy-ratio: 0.51\n}\nlyrics-font {\n  family: Times New Roman\n  size: 90%\n  height-ratio: 0.9\n  dy-ratio: 0.75\n}\n\nscore {\n  width: 450px\n  margin-left: 20px\n  margin-top: 10px\n  margin-right: 20px\n  margin-bottom: 20px\n  head-body-sep: 20px\n}\n\nhead {\n  title-subtitle-sep: 70%\n  title-creator-sep: 75%\n  creators-sep: 30%\n}\n\nbody {\n  systems-sep: 200%\n}\n\nsystem {\n  align: justify  // left|justify|equal\n  staves-sep: 100%\n  part-name-padding-right: 30%\n}\n\nsystem-head {\n  braced-staves: Piano, test\n  brace-padding-right: 10%\n  brace-width: 30%\n  brace-stroke-width: 10%\n}\n\ncell {\n  padding-left: 90%\n  padding-right: 90%\n  data-sep: 100%\n  data-direction-sep: 30%\n}\n\nbar {\n  line-height: 100%\n  light-width: 5%\n  heavy-width: 15%\n  dot-size: 12%\n  lines-sep: 15%\n  dots-sep: 20%\n  line-dot-sep: 12%\n}\n\ntime {\n  line-height: 6%\n  line-ext: 5%\n  line-number-sep: 5%\n}\n\nnote {\n  pitch-beam-sep: 9%\n  pitch-line-sep: 60%\n  pitch-dot-sep: 6%\n}\n\nchord {\n  pitches-sep: 10%\n  tie-mode: single  // single|multiple\n}\n\nnote, chord {\n  pitch-tuplet-sep: 30%\n  data-lyric-sep: 50%\n  lyrics-v-sep: 50%\n  lyrics-h-sep: 50%\n}\n\ndirection {\n  tmp: 0\n}\n\npitch {\n  step-accidental-sep: 0%\n  step-octave-sep: 7%\n  octave-size: 12%\n  octaves-sep: 6%\n}\n\ndurationGE4 {\n  beam-height: 5%\n  beams-sep: 1%\n  dot-lift: 6%\n  dot-size: 12%\n  dots-sep: 10%\n}\n\ndurationLE2 {\n  line-width: 50%\n  line-height: 6%\n  lines-sep: 60%\n  line-dot-sep: 60%\n  dot-size: 12%\n  dots-sep: 60%\n}\n\ntie {\n  lift: 70%\n  stroke-width: 9%\n}\n\nslur {\n  lift: 70%\n  stroke-width: 9%\n}\n\ntuplet {\n  lift: 30%\n  stroke-width: 5%\n}\n";function ur(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var cr=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"x1",get:function(){return this.x},set:function(t){this.x=t}},{key:"y1",get:function(){return this.y},set:function(t){this.y=t}},{key:"x2",get:function(){return this.x+this.width},set:function(t){this.x=t-this.width}},{key:"y2",get:function(){return this.y+this.height},set:function(t){this.y=t-this.height}},{key:"cx",get:function(){return this.x+this.width/2},set:function(t){this.x=t-this.width/2}},{key:"cy",get:function(){return this.y+this.height/2},set:function(t){this.y=t-this.height/2}},{key:"dx2",get:function(){return this.width-this.dx},set:function(t){this.dx=this.width-t}},{key:"dy2",get:function(){return this.height-this.dy},set:function(t){this.dy=this.height-t}},{key:"bx",get:function(){return this.x+this.dx},set:function(t){this.x=t-this.dx}},{key:"by",get:function(){return this.y+this.dy},set:function(t){this.y=t-this.dy}},{key:"position",set:function(t){Object.assign(this,t)}},{key:"wh",get:function(){return{width:this.width,height:this.height}}},{key:"xy",get:function(){return{x:this.x,y:this.y}}},{key:"xby",get:function(){return{x:this.x,y:this.by}}},{key:"cxby",get:function(){return{x:this.cx,y:this.by}}},{key:"x2by",get:function(){return{x:this.x2,y:this.by}}},{key:"x2cy",get:function(){return{x:this.x2,y:this.cy}}},{key:"cxcy",get:function(){return{x:this.cx,y:this.cy}}},{key:"rect",get:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},{key:"circle",get:function(){return{cx:this.cx,cy:this.cy,r:this.r}}},{key:"toJSON",value:function(){return{name:this.name,x:this.x,y:this.y,width:this.width,height:this.height,x2:this.x2,y2:this.y2,cx:this.cx,cy:this.cy,bx:this.bx,by:this.by,dx:this.dx,dy:this.dy}}}])&&ur(e.prototype,n),r&&ur(e,r),t}();function fr(t){return(fr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function lr(t,e){return(lr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function hr(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=dr(t);if(e){var o=dr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return yr(this,n)}}function yr(t,e){if(e&&("object"===fr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return pr(t)}function pr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function dr(t){return(dr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var vr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&lr(t,e)}(n,t);var e=hr(n);function n(t,r,o){var i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),i=e.call(this);var a=g(r,t).width;return null!=o&&(a=o),i.name="text-layout",i.text=t,Object.assign(pr(i),r),i.width=a,i}return n}(cr);function br(t){return(br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mr(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function wr(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?mr(Object(n),!0).forEach((function(e){jr(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):mr(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function gr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Or(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Sr(t,e,n){return(Sr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=xr(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function kr(t,e,n,r){return(kr="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=xr(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else jr(r,e,n);return!0})(t,e,n,r)}function jr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function xr(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ar(t)););return t}function Pr(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Lr(t,e)}function Lr(t,e){return(Lr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Er(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ar(t);if(e){var o=Ar(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Rr(this,n)}}function Rr(t,e){if(e&&("object"===br(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ar(t){return(Ar=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Dr=function(t){Pr(i,t);var e,n,r,o=Er(i);function i(t,e){var n;return gr(this,i),(n=o.call(this)).name="system-head-layout",n.head=t,n.style=e,n.setBracesLayouts(),n.partNamesLayouts=t.partHeads.map((function(n){var r="full"===t.nameType?n.partName:n.abbreviation;return null==r||0==r.length?new vr(r,e.partNameFont,0):new vr(r,e.partNameFont)})),n.setWidth(),n}return e=i,(n=[{key:"setBracesLayouts",value:function(){var t=this,e=this.head,n=e.partHeads,r=e.partsToCellsIndices;r&&r.forEach((function(e,r){if("Piano"===n[r].partName&&e.length>=2){t.bracesLayouts=t.bracesLayouts||[];var o=new Tr(t.style);o.cs=[e[0],a(e)],t.bracesLayouts.push(o)}}))}},{key:"setWidth",value:function(){var t=this.style.system.partNamePaddingRight;if(this.width=u(this.partNamesLayouts.map((function(t){return t.width}))),this.width&&(this.width+=t),this.bracesLayouts){var e=this.style.systemHead,n=e.bracePaddingRight,r=e.braceWidth;this.width+=n+r}}},{key:"setBracesHeight",value:function(){var t=this;this.bracesLayouts.forEach((function(e){var n=e.cs;e.height=t.staves.by0s[n[1]]-t.staves.by0s[n[0]]+t.style.bar.lineHeight,e.by0=t.staves.by0s[n[1]]}))}},{key:"position",set:function(t){var e=this;!function(t,e,n,r,o){if(!kr(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Ar(i.prototype),"position",t,this,!0);var n=this.x2,r=this.y;if(this.staves){var o=this.staves.by0s.map((function(t,e){return r+t})),s=n-this.style.system.partNamePaddingRight;if(this.bracesLayouts){var u=this.style.systemHead,c=u.bracePaddingRight,f=u.braceWidth;s-=c+f}var l=this.staves.partsToCellsIndices,h=this.style.bar.lineHeight;this.partNamesLayouts.forEach((function(t,e){var n=l[e],r=o[n[0]]-h,i=o[a(n)];t.position={x2:s,cy:(r+i)/2}})),this.bracesLayouts&&(this.setBracesHeight(),this.bracesLayouts.forEach((function(t){t.position={x2:n-e.style.systemHead.bracePaddingRight,y2:r+t.by0}})))}}},{key:"toJSON",value:function(){var t=this.partNamesLayouts,e=this.bracesLayouts;return wr(wr({},Sr(Ar(i.prototype),"toJSON",this).call(this)),{},{partNamesLayouts:t,bracesLayouts:e})}}])&&Or(e.prototype,n),r&&Or(e,r),i}(cr),Tr=function(t){Pr(n,t);var e=Er(n);function n(t){var r;return gr(this,n),(r=e.call(this)).style=t,r.width=t.systemHead.braceWidth,r.strokeWidth=t.systemHead.braceStrokeWidth,r}return n}(cr);function Nr(t){return(Nr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Cr(t,e){return(Cr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Br(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Mr(t);if(e){var o=Mr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return zr(this,n)}}function zr(t,e){if(e&&("object"===Nr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Fr(t)}function Fr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Mr(t){return(Mr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Gr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Cr(t,e)}(n,t);var e=Br(n);function n(t,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),(o=e.call(this)).name="layout",Object.assign(Fr(o),r,t),o}return n}(cr);function Qr(t){return(Qr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Wr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Jr(t,e){return(Jr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function qr(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ur(t);if(e){var o=Ur(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ir(this,n)}}function Ir(t,e){if(e&&("object"===Qr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Vr(t)}function Vr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ur(t){return(Ur=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Xr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Jr(t,e)}(i,t);var e,n,r,o=qr(i);function i(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="tie-layout",n.tie=t,t.layout=Vr(n),n.style=e;var r=e.tie,a=r.lift,s=r.strokeWidth;return n.lift=a,n.strokeWidth=s,n}return e=i,(n=[{key:"nextTie",get:function(){var t=this.style.chord.tieMode,e=this.tie,n=e.note,r=e.nextNote;return null!=n&&null!=r&&"single"===t&&"note"===n.name&&"chord"===r.name?r.tie:this.tie.next}},{key:"showPrev",get:function(){var t=this.tie.prev;return t&&t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,o=this.nextTie;if(o)if(this.sys===o.layout.sys)t=o.layout.x1,e=o.layout.y1;else{var i=this.tie.cell.layout,a=i.shownRightBarLayout||i.rightBarLayout;t=a.x,e=a.y}else t=n+30,e=r-20;return this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y,n=this.tie.cell.layout.shownLeftBarLayout;return{x1:t,y1:e,x2:n.x,y2:n.y}}}])&&Wr(e.prototype,n),r&&Wr(e,r),i}(cr);function Kr(t){return(Kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Hr(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Zr(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Hr(Object(n),!0).forEach((function(e){ro(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Hr(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Yr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function $r(t,e,n){return e&&_r(t.prototype,e),n&&_r(t,n),t}function to(t,e,n){return(to="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=oo(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function eo(t,e,n,r){return(eo="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=oo(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else ro(r,e,n);return!0})(t,e,n,r)}function no(t,e,n,r,o){if(!eo(t,e,n,r||t)&&o)throw new Error("failed to set property");return n}function ro(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function oo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=fo(t)););return t}function io(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ao(t,e)}function ao(t,e){return(ao=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function so(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=fo(t);if(e){var o=fo(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return uo(this,n)}}function uo(t,e){if(e&&("object"===Kr(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return co(t)}function co(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function fo(t){return(fo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var lo={"#":"","##":"",n:"",b:"",bb:""},ho=function(t){io(n,t);var e=so(n);function n(t,r,o){var i;Yr(this,n),(i=e.call(this)).name="pitch-layout",i.pitch=t,i.style=r,i.NoteLayout=o;var a=t.step,s=t.accidental,u=t.octave,c=t.tie;return i.stepLayout=new yo(a,r),i.accidentalLayout=new po(s,r),i.octavesLayout=new vo(u,r),c&&(i.tieLayout=new Xr(c,r)),i.tieMode=r.chord.tieMode,i.setSize(),i}return $r(n,[{key:"setSize",value:function(){var t=this.pitch,e=t.accidental,n=t.octave,r=this.stepLayout,o=r.width,i=r.height,a=e?this.accidentalLayout.width:0,s=(e&&this.accidentalLayout.height,n?this.octavesLayout.height:0),u=this.style.pitch,c=u.stepAccidentalSep,f=u.stepOctaveSep,l=(this.style.accidentalFont.lift,i),h=i+(n?s+f:0);this.width=o+(e?a+c:0),this.height=n>=0?Math.max(l,h):l+f+s,this.dx2=this.stepLayout.width/2,this.dy=this.height}},{key:"position",set:function(t){var e=this.pitch,r=e.accidental,o=e.octave,i=e.tie,a=this.style.pitch.stepOctaveSep,s=this.style.accidentalFont.lift;this.style.durationGE4.dotLift;no(fo(n.prototype),"position",t,this,!0);var u=this.x,c=this.x2,f=this.y2-(o>=0?0:this.octavesLayout.height+a-3);this.stepLayout.position={x2:c,y2:f};var l=this.stepLayout,h=l.cx,y=l.y;if(r&&(this.accidentalLayout.position={x:u,y2:f-s-5}),o){var p=o>0?{cx:h,y2:y-a-2}:{cx:h,y:f+a+(this.NoteLayout?this.NoteLayout.durationLayout.height+6:0)};this.octavesLayout.position=p}if(i){var d=this.stepLayout,v=d.cx,b=d.y;this.tieLayout.position={x:v,y:b}}}},{key:"toJSON",value:function(){var t=this.stepLayout,e=this.accidentalLayout,r=this.octavesLayout,o=this.tieLayout;return Zr(Zr({},to(fo(n.prototype),"toJSON",this).call(this)),{},{stepLayout:t,accidentalLayout:e,octavesLayout:r,tieLayout:o})}}]),n}(cr),yo=function(t){io(n,t);var e=so(n);function n(t,r){var o;return Yr(this,n),(o=e.call(this)).name="step-layout",Object.assign(co(o),r.stepFont),o}return n}(cr),po=function(t){io(n,t);var e=so(n);function n(t,r){var o;return Yr(this,n),(o=e.call(this)).name="accidental-layout",Object.assign(co(o),r.accidentalFont),o.char=lo[t],"bb"===o.accidental&&(o.dx=.66*r.accidentalFont.dx),o}return n}(cr),vo=function(t){io(n,t);var e=so(n);function n(t,r){var o;Yr(this,n),(o=e.call(this)).name="octaves-layout";var i=Math.abs(t),a=r.pitch,s=a.octaveSize;a.octavesSep;return o.octave=t,o.style=r,o.width=s,o.height=i,o.r=s/2,o}return $r(n,[{key:"position",set:function(t){var e=this;no(fo(n.prototype),"position",t,this,!0);var r=this.style.pitch,o=r.octaveSize,i=r.octavesSep;this.layouts=[];var a=this.cx,s=this.y,u=this.width,c=this.r;f(Math.abs(this.octave)).forEach((function(t){e.layouts.push(new Gr({cx:a,y:s},{width:u,height:u,r:c})),e.octave>0?s-=o+i:s+=o+i}))}},{key:"toJSON",value:function(){return Zr(Zr({},to(fo(n.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),n}(cr);function bo(t){return(bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function wo(t,e){return(wo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function go(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ko(t);if(e){var o=ko(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Oo(this,n)}}function Oo(t,e){if(e&&("object"===bo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return So(t)}function So(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ko(t){return(ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var jo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wo(t,e)}(i,t);var e,n,r,o=go(i);function i(t,e,n,r){var a;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(a=o.call(this)).name="beam-layout",a.beam=t,t.layout=So(a),a.duration=e,a.dotsLayout=n,a.style=r,a.setSize(),a}return e=i,(n=[{key:"beamedWidth",get:function(){return this.beam.endBeam.layout.x2-this.x}},{key:"setSize",value:function(){var t=this.style,e=t.stepFont,n=t.note,r=t.durationGE4;this.width=e.width+(this.duration.dots?this.dotsLayout.width+n.pitchDotSep:0),this.height=r.beamHeight}}])&&mo(e.prototype,n),r&&mo(e,r),i}(cr);function xo(t){return(xo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Po(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Lo(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Po(Object(n),!0).forEach((function(e){Co(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Po(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Eo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ro(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ao(t,e,n){return e&&Ro(t.prototype,e),n&&Ro(t,n),t}function Do(t,e,n){return(Do="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Bo(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function To(t,e,n,r){return(To="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=Bo(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else Co(r,e,n);return!0})(t,e,n,r)}function No(t,e,n,r,o){if(!To(t,e,n,r||t)&&o)throw new Error("failed to set property");return n}function Co(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Bo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Qo(t)););return t}function zo(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Fo(t,e)}function Fo(t,e){return(Fo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Mo(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Qo(t);if(e){var o=Qo(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Go(this,n)}}function Go(t,e){if(e&&("object"===xo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Qo(t){return(Qo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Wo=function(t){zo(n,t);var e=Mo(n);function n(t,r){var o;Eo(this,n),(o=e.call(this)).name="duration-layout",o.duration=t,o.style=r;var i=t.type;return t.dots&&(o.dotsLayout=new Io(t,r)),i<4?o.linesLayout=new Jo(t,r):i>4&&(o.beamsLayout=new qo(t,o.dotsLayout,r)),o.setSize(),o}return Ao(n,[{key:"setSize",value:function(){var t=this.duration,e=t.type,n=t.dots;4===e?this.setType4Size(n):e>4?this.setTypeGt4Size(n):this.setTypeLt4Size(n),this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.linesLayout.width,n=this.linesLayout.height;if(t){var r=this.linesLayout,o=(r.width,r.height,this.dotsLayout.width),i=this.dotsLayout.height;this.width=e+this.style.durationLE2.lineDotSep+o,this.height=Math.max(n,i)}else this.width=e,this.height=n}},{key:"setType4Size",value:function(t){this.width=t?this.dotsLayout.width:0,this.height=t?this.dotsLayout.height:0}},{key:"setTypeGt4Size",value:function(t){if(this.width=this.beamsLayout.width,this.height=this.beamsLayout.height,t){var e=this.style.note.pitchBeamSep,n=this.style.durationGE4.dotLift;this.height+=e+n+this.dotsLayout.height}}},{key:"position",set:function(t){No(Qo(n.prototype),"position",t,this,!0);var e=this.duration,r=e.type,o=e.dots,i=this.style,a=(i.durationLE2,i.durationGE4,this.x),s=this.x2,u=this.y,c=this.cy,f=this.y2;r<4?(this.linesLayout.position={x:a,cy:c},o&&(this.dotsLayout.position={x2:s,cy:c})):(r>4&&(this.beamsLayout.position={x:a,y2:f+8}),o&&(this.dotsLayout.position={x2:s,y:u}))}},{key:"toJSON",value:function(){var t=this.beamsLayout,e=this.linesLayout,r=this.dotsLayout;return Lo(Lo({},Do(Qo(n.prototype),"toJSON",this).call(this)),{},{beamsLayout:t,linesLayout:e,dotsLayout:r})}}]),n}(cr),Jo=function(t){zo(n,t);var e=Mo(n);function n(t,r){var o;return Eo(this,n),(o=e.call(this)).name="lines-layout",o.duration=t,o.style=r,o.setLineSize(),o.setSize(t.type),o}return Ao(n,[{key:"setLineSize",value:function(){var t=this.style.durationLE2,e=t.lineWidth,n=t.lineHeight;this.lineSize={width:e,height:n}}},{key:"setSize",value:function(t){var e=this.style.durationLE2,n=e.lineWidth,r=e.linesSep,o=e.lineHeight;this.width=2===t?n:3*n+2*r,this.height=o}},{key:"position",set:function(t){var e=this;No(Qo(n.prototype),"position",t,this,!0);var r=this.duration,o=r.type,i=(r.dots,this.style.durationLE2),a=i.lineWidth,s=i.linesSep,u=this.x,c=this.cy;this.layouts=f(2===o?1:3).map((function(t){return new Gr({x:u+t*(a+s),cy:c},e.lineSize)}))}}]),n}(cr),qo=function(t){zo(n,t);var e=Mo(n);function n(t,r,o){var i;return Eo(this,n),(i=e.call(this)).name="beams-layout",i.duration=t,i.dotsLayout=r,i.style=o,i.layouts=t.beams.map((function(e){return new jo(e,t,r,o)})),i.setSize(),i}return Ao(n,[{key:"setSize",value:function(){var t=this.duration.numBeams,e=this.style.durationGE4,n=e.beamHeight,r=e.beamsSep;this.width=this.layouts[0].width,this.height=t*n+t*r}},{key:"position",set:function(t){No(Qo(n.prototype),"position",t,this,!0);var e=this.x,r=this.y2,o=this.style.durationGE4,i=o.beamHeight,a=o.beamsSep;this.layouts.forEach((function(t,n){t.position={x:e,y2:r},r-=i-a-6}))}},{key:"toJSON",value:function(){return Lo(Lo({},Do(Qo(n.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),n}(cr),Io=function(t){zo(n,t);var e=Mo(n);function n(t,r){var o;return Eo(this,n),(o=e.call(this)).name="dots-layout",o.duration=t,o.style=r,o.setDotSize(t.type),o.setSize(t.type,t.dots),o}return Ao(n,[{key:"setDotSize",value:function(t){var e=this.style,n=e.durationGE4,r=e.durationLE2,o=t>=4?n.dotSize:r.dotSize;this.dotSize={width:o,height:o,r:o/2}}},{key:"setSize",value:function(t,e){var n=this.style,r=n.durationGE4,o=n.durationLE2,i=function(t){return e*t.dotSize+(e-1)*t.dotsSep};this.width=i(t>=4?r:o),this.height=this.dotSize.height}},{key:"position",set:function(t){var e=this;No(Qo(n.prototype),"position",t,this,!0);var r=this.duration,o=r.type,i=r.dots;if(o>=4){var a=this.style.durationGE4.dotsSep,s=this.x2,u=this.y;this.layouts=f(i).map((function(t){return new Gr({x2:s-t*(e.dotSize.width+a),y:u},e.dotSize)}))}else{var c=this.style.durationLE2.dotsSep,l=this.x2,h=this.cy;this.layouts=f(i).map((function(t){return new Gr({x2:l-t*(e.dotSize.width+c),cy:h},e.dotSize)}))}}},{key:"toJSON",value:function(){return Lo(Lo({},Do(Qo(n.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),n}(cr);function Vo(t){return(Vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Uo(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Xo(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Uo(Object(n),!0).forEach((function(e){Ko(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Uo(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ko(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ho(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Zo(t,e,n){return(Zo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ei(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Yo(t,e){return(Yo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _o(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ei(t);if(e){var o=ei(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return $o(this,n)}}function $o(t,e){if(e&&("object"===Vo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ti(t)}function ti(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ei(t){return(ei=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ni=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Yo(t,e)}(i,t);var e,n,r,o=_o(i);function i(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="tuplet-layout",n.tuplet=t,t.layout=ti(n),n.style=e,n.textLayout=new vr(Gt.tupletLengthInTu,e.tupletFont);var r=e.tuplet,a=r.lift,s=r.strokeWidth;return n.lift=a,n.strokeWidth=s,n.pitchTupletSep=e.note.pitchTupletSep,n}return e=i,(n=[{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,o=this.tuplet.next;return o?(t=o.layout.x1,e=o.layout.y1):(t=n+30,e=r-20),this.textLayout.position={cx:(n+t)/2,cy:(r+e)/2-this.pitchTupletSep-this.lift},this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}},{key:"toJSON",value:function(){var t=this.textLayout;return Xo(Xo({},Zo(ei(i.prototype),"toJSON",this).call(this)),{},{textLayout:t})}}])&&Ho(e.prototype,n),r&&Ho(e,r),i}(cr);function ri(t){return(ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function oi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ii(t,e){return(ii=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ai(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ci(t);if(e){var o=ci(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return si(this,n)}}function si(t,e){if(e&&("object"===ri(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ui(t)}function ui(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ci(t){return(ci=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var fi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ii(t,e)}(i,t);var e,n,r,o=ai(i);function i(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="slur-layout",n.slur=t,t.layout=ui(n),n.style=e;var r=e.slur,a=r.lift,s=r.strokeWidth;return n.lift=a,n.strokeWidth=s,n}return e=i,(n=[{key:"showPrev",get:function(){var t=this.slur.prev;return!t||t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,o=this.slur.next;if(o)if(this.sys===o.layout.sys)t=o.layout.x1,e=o.layout.y1;else{var i=a(this.systemLayout.measuresLayouts).cellsLayouts[this.c],s=i.shownRightBarLayout||i.rightBarLayout;t=s.x,e=s.y}else t=n+30,e=r-20;return this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y;if(!this.slur.prev)return{x1:t,y1:e,x2:t-30,y2:e-20};var n=this.systemLayout.measuresLayouts[0].cellsLayouts[this.c].shownLeftBarLayout;return{x1:t,y1:e,x2:n.x,y2:n.y}}}])&&oi(e.prototype,n),r&&oi(e,r),i}(cr);function li(t){return(li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function yi(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?hi(Object(n),!0).forEach((function(e){bi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):hi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function pi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function di(t,e,n){return(di="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=mi(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function vi(t,e,n,r){return(vi="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=mi(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else bi(r,e,n);return!0})(t,e,n,r)}function bi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function mi(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ki(t)););return t}function wi(t,e){return(wi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function gi(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ki(t);if(e){var o=ki(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Oi(this,n)}}function Oi(t,e){if(e&&("object"===li(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Si(t)}function Si(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ki(t){return(ki=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ji=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wi(t,e)}(i,t);var e,n,r,o=gi(i);function i(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="note-layout",n.note=t,n.style=e,n.durationLayout=new Wo(t.duration,e),n.pitchLayout=new ho(t.pitch,e,Si(n)),n.setSize(t.duration,n.pitchLayout);var r=t.tie,a=t.tuplet,s=t.beginSlurs,u=t.endSlurs,c=t.lyrics;return r&&(n.tieLayout=new Xr(r,e)),a&&(n.tupletLayout=new ni(a,e)),s&&(n.beginSlursLayouts=s.map((function(t){return new fi(t,e)}))),u&&(n.endSlursLayouts=u.map((function(t){return new fi(t,e)}))),c&&(n.lyricsLayouts=c.map((function(t){var n=new vr(t.text,e.lyricsFont);return n.lyric=t,t.layout=n,n.dx=n.width/2,n}))),n}return e=i,(n=[{key:"setSize",value:function(t,e){var n=t.type,r=t.dots;n<4?this.setTypeLt4Size(e):4===n?this.setType4Size(r,e):this.setTypeGt4Size(r,e),this.dx=e.dx;var o=(this.note||this.chord||this.rest).lyrics;if(o){var i=o.length,a=this.style.note,s=a.dataLyricSep+a.lyricsVSep*(i-1)+this.style.lyricsFont.height*i;this.height+=s,this.dy2=s}else this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.durationLayout,n=this.style.note.pitchLineSep;this.width=t.width+n+e.width,this.height=t.height}},{key:"setType4Size",value:function(t,e){var n=this.style.note.pitchDotSep,r=this.durationLayout;this.width=e.width+(t?r.width+n:0),this.height=e.height}},{key:"setTypeGt4Size",value:function(t,e){this.style.note.pitchBeamSep;var n=this.style.stepFont,r=this.durationLayout;this.width=e.width+(t?r.width-n.width:0),this.height=e.height}},{key:"position",set:function(t){var e=this;!function(t,e,n,r,o){if(!vi(t,e,n,r||t)&&o)throw new Error("failed to set property")}(ki(i.prototype),"position",t,this,!0);var n=this.note.pitch.octave,r=this.note.duration,o=r.type,a=r.dots,s=this.style.durationGE4.dotLift,u=this.x,c=this.y,f=this.x2,l=this.by,h=this.pitchLayout,y=h.stepLayout,p=h.octavesLayout;this.pitchLayout.position={x:u,y:c},o>4&&a&&n<0&&(this.durationLayout.beamsLayout.height+=p.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===o?{x2:f,by:y.by-s}:o>4?{x:y.x,by:l-s-2}:{x2:f,cy:y.cy};var d=this.note,v=d.tie,b=d.tuplet,m=d.beginSlurs,w=d.endSlurs,g=d.lyrics;if(v||b||m||w){var O=this.pitchLayout.stepLayout,S=O.cx,k=O.y;v&&(this.tieLayout.position={x:S,y:k-6}),b&&(this.tupletLayout.position={x:S,y:this.y}),m&&this.beginSlursLayouts.forEach((function(t){t.position={x:S,y:k}})),w&&this.endSlursLayouts.forEach((function(t){t.position={x:S,y:k}}))}if(g){var j=this.style.note,x=j.dataLyricSep,P=j.lyricsVSep,L=this.style.lyricsFont,E=L.dy,R=L.height,A=this.by+x+E;this.lyricsLayouts.forEach((function(t,n){t.position={cx:e.bx,by:A+(P+R)*n}}))}}},{key:"toJSON",value:function(){var t=this.pitchLayout,e=this.durationLayout;return yi(yi({},di(ki(i.prototype),"toJSON",this).call(this)),{},{pitchLayout:t,durationLayout:e})}}])&&pi(e.prototype,n),r&&pi(e,r),i}(cr);function xi(t){return(xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Pi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Li(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Pi(Object(n),!0).forEach((function(e){Ti(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Pi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ei(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ri(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ai(t,e,n){return(Ai="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Ni(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Di(t,e,n,r){return(Di="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=Ni(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else Ti(r,e,n);return!0})(t,e,n,r)}function Ti(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ni(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Gi(t)););return t}function Ci(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Bi(t,e)}function Bi(t,e){return(Bi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function zi(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Gi(t);if(e){var o=Gi(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Fi(this,n)}}function Fi(t,e){if(e&&("object"===xi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Mi(t)}function Mi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Gi(t){return(Gi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Qi=ji.prototype,Wi=Qi.setSize,Ji=Qi.setTypeLt4Size,qi=Qi.setType4Size,Ii=Qi.setTypeGt4Size,Vi=function(t){Ci(i,t);var e,n,r,o=zi(i);function i(t,e){var n;return Ei(this,i),(n=o.call(this)).setSize=Wi,n.setTypeLt4Size=Ji,n.setType4Size=qi,n.setTypeGt4Size=Ii,n.name="rest-layout",n.rest=t,n.style=e,n.zeroLayout=new Ui(e),n.durationLayout=new Wo(t.duration,e),n.setSize(t.duration,n.zeroLayout),n}return e=i,(n=[{key:"position",set:function(t){!function(t,e,n,r,o){if(!Di(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Gi(i.prototype),"position",t,this,!0);var e=this.x,n=this.y,r=this.x2,o=this.y2,a=this.rest.duration.type,s=this.style.durationGE4.dotLift;this.zeroLayout.position={x:e,y:n},this.durationLayout.position=4===a?{x2:r,y2:this.zeroLayout.y2-s}:a>4?{x:this.zeroLayout.x,y2:o}:{x2:r,cy:this.zeroLayout.cy}}},{key:"toJSON",value:function(){var t=this.zeroLayout;return Li(Li({},Ai(Gi(i.prototype),"toJSON",this).call(this)),{},{zeroLayout:t})}}])&&Ri(e.prototype,n),r&&Ri(e,r),i}(cr),Ui=function(t){Ci(n,t);var e=zi(n);function n(t){var r;return Ei(this,n),r=e.call(this),Object.assign(Mi(r),t.restFont),r.dx=r.width/2,r}return n}(cr);function Xi(t){return(Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ki(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Hi(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ki(Object(n),!0).forEach((function(e){na(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ki(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Zi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Yi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _i(t,e,n){return e&&Yi(t.prototype,e),n&&Yi(t,n),t}function $i(t,e,n){return($i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=ra(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function ta(t,e,n,r){return(ta="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=ra(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else na(r,e,n);return!0})(t,e,n,r)}function ea(t,e,n,r,o){if(!ta(t,e,n,r||t)&&o)throw new Error("failed to set property");return n}function na(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ra(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ua(t)););return t}function oa(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ia(t,e)}function ia(t,e){return(ia=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function aa(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ua(t);if(e){var o=ua(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return sa(this,n)}}function sa(t,e){if(e&&("object"===Xi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ua(t){return(ua=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ca=ji.prototype,fa=ca.setSize,la=ca.setTypeLt4Size,ha=ca.setType4Size,ya=ca.setTypeGt4Size,pa=function(t){oa(n,t);var e=aa(n);function n(t,r){var o;Zi(this,n),(o=e.call(this)).setSize=fa,o.setTypeLt4Size=la,o.setType4Size=ha,o.setTypeGt4Size=ya,o.name="chord-layout",o.chord=t,o.style=r,o.pitchesLayout=new da(t.pitches,r),o.durationLayout=new Wo(t.duration,r),o.setSize(t.duration,o.pitchesLayout),o.tieMode=r.chord.tieMode;var i=t.tie,a=t.tuplet,s=t.beginSlurs,u=t.endSlurs,c=t.lyrics;return i&&(o.tieLayout=new Xr(i,r)),a&&(o.tupletLayout=new ni(a,r)),s&&(o.beginSlursLayouts=s.map((function(t){return new fi(t,r)}))),u&&(o.endSlursLayouts=u.map((function(t){return new fi(t,r)}))),c&&(o.lyricsLayouts=c.map((function(t){var e=new vr(t.text,r.lyricsFont);return e.lyric=t,t.layout=e,e.dx=e.width/2,e}))),o}return _i(n,[{key:"position",set:function(t){var e=this;ea(ua(n.prototype),"position",t,this,!0);var r=this.x,o=this.y,i=this.x2,a=this.y2;this.pitchesLayout.position={x:r,y:o};var s=this.chord.pitches[0].octave,u=this.chord.duration,c=u.type,f=u.dots,l=this.style.durationGE4.dotLift,h=this.pitchesLayout.layouts[0],y=h.stepLayout,p=h.octavesLayout;c>4&&f&&s<0&&(this.durationLayout.beamsLayout.height+=p.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===c?{x2:i,y2:y.y2-l}:c>4?{x:y.x,y2:a}:{x2:i,cy:y.cy};var d=this.chord,v=d.tie,b=d.tuplet,m=d.beginSlurs,w=d.endSlurs,g=d.lyrics;if(v||b||m||w){var O=this.pitchesLayout.layouts[0].stepLayout.cx;v&&(this.tieLayout.position={x:O,y:o}),b&&(this.tupletLayout.position={x:O,y:this.y}),m&&this.beginSlursLayouts.forEach((function(t){t.position={x:O,y:o}})),w&&this.endSlursLayouts.forEach((function(t){t.position={x:O,y:o}}))}if(g){var S=this.style.chord,k=S.dataLyricSep,j=S.lyricsVSep,x=this.style.lyricsFont,P=x.dy,L=x.height,E=this.by+k+P;this.lyricsLayouts.forEach((function(t,n){t.position={cx:e.bx,by:E+(j+L)*n}}))}}},{key:"toJSON",value:function(){var t=this.pitchesLayout;return Hi(Hi({},$i(ua(n.prototype),"toJSON",this).call(this)),{},{pitchesLayout:t})}}]),n}(cr),da=function(t){oa(n,t);var e=aa(n);function n(t,r){var o;Zi(this,n),(o=e.call(this)).pitches=t,o.style=r;var i=r.chord.pitchesSep,a=0,s=-i;return o.layouts=t.map((function(t){return new ho(t,r)})),o.layouts.forEach((function(t){a=Math.max(a,t.width),s+=t.height+i})),o.width=a,o.dx2=o.layouts[0].dx2,o.height=s,o}return _i(n,[{key:"position",set:function(t){var e=this;ea(ua(n.prototype),"position",t,this,!0);var r=this.x2,o=this.y2;this.layouts.forEach((function(t){t.position={x2:r,y2:o},o=t.y-e.style.chord.pitchesSep}))}},{key:"toJSON",value:function(){var t=this.layouts;return Hi(Hi({},$i(ua(n.prototype),"toJSON",this).call(this)),{},{layouts:t})}}]),n}(cr);function va(t){return(va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ba(t,e){return(ba=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ma(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=ga(t);if(e){var o=ga(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return wa(this,n)}}function wa(t,e){if(e&&("object"===va(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function ga(t){return(ga=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Oa=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ba(t,e)}(n,t);var e=ma(n);function n(t,r){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),(o=e.call(this)).name="multipart-layout",o.multipart=t,o.style=r,o.width=20,o.height=20,o}return n}(cr);function Sa(t){return(Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ka(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ja(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ka(Object(n),!0).forEach((function(e){Ra(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ka(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function xa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Pa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function La(t,e,n){return(La="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Aa(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Ea(t,e,n,r){return(Ea="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=Aa(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else Ra(r,e,n);return!0})(t,e,n,r)}function Ra(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Aa(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ba(t)););return t}function Da(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ta(t,e)}function Ta(t,e){return(Ta=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Na(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ba(t);if(e){var o=Ba(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ca(this,n)}}function Ca(t,e){if(e&&("object"===Sa(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ba(t){return(Ba=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var za=function(t){Da(i,t);var e,n,r,o=Na(i);function i(t,e){var n;return xa(this,i),(n=o.call(this)).name="time-layout",n.time=t,n.style=e,n.beatsLayout=new vr(t.beats,e.timeFont),n.beatTypeLayout=new vr(t.beatType,e.timeFont),n.lineLayout=new Fa(n.beatsLayout,n.beatTypeLayout,e),n.width=n.lineLayout.width,n.dx=n.width/2,n.setHeight(),n}return e=i,(n=[{key:"setHeight",value:function(){var t=this.style,e=t.time,n=t.timeFont,r=this.lineLayout.height;this.height=2*n.height+r+2*e.lineNumberSep,this.dy=this.height}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!Ea(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Ba(i.prototype),"position",t,this,!0);var e=this.cx,n=this.y,r=this.cy,o=this.y2;this.beatsLayout.position={cx:e-20,y:n},this.lineLayout.position={cx:e-20,cy:r},this.beatTypeLayout.position={cx:e-20,y2:o}}},{key:"toJSON",value:function(){var t=this.beatsLayout,e=this.lineLayout,n=this.beatTypeLayout;return ja(ja({},La(Ba(i.prototype),"toJSON",this).call(this)),{},{beatsLayout:t,lineLayout:e,beatTypeLayout:n})}}])&&Pa(e.prototype,n),r&&Pa(e,r),i}(cr),Fa=function(t){Da(n,t);var e=Na(n);function n(t,r,o){var i;return xa(this,n),(i=e.call(this)).width=Math.max(t.width,r.width)+2*o.time.lineExt,i.height=o.time.lineHeight,i}return n}(cr);function Ma(t){return(Ma="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ga(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Qa(t,e,n,r){return(Qa="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ia(t)););return t}(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else!function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(r,e,n);return!0})(t,e,n,r)}function Wa(t,e){return(Wa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ja(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ia(t);if(e){var o=Ia(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return qa(this,n)}}function qa(t,e){if(e&&("object"===Ma(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ia(t){return(Ia=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Va=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Wa(t,e)}(i,t);var e,n,r,o=Ja(i);function i(t,e){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="direction-layout",n.direction=t,n.style=e;var r=t.words,a=t.dynamics;t.wedge;return r?n.textLayout=new vr(r,e.directionFont):a&&(n.textLayout=new vr(a,e.dynamicsFont)),n.setSize(),n}return e=i,(n=[{key:"setSize",value:function(){this.textLayout?(this.width=this.textLayout.width,this.height=this.textLayout.height):(this.width=20,this.height=0),this.dx=this.width/2,this.dy=this.height}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!Qa(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Ia(i.prototype),"position",t,this,!0);var e=this.x,n=this.y;this.textLayout&&(this.textLayout.position={x:e,y:n})}}])&&Ga(e.prototype,n),r&&Ga(e,r),i}(cr);function Ua(t){return(Ua="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xa(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ka(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Xa(Object(n),!0).forEach((function(e){_a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Xa(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ha(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Za(t,e,n){return(Za="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=$a(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Ya(t,e,n,r){return(Ya="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=$a(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else _a(r,e,n);return!0})(t,e,n,r)}function _a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function $a(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=rs(t)););return t}function ts(t,e){return(ts=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function es(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=rs(t);if(e){var o=rs(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ns(this,n)}}function ns(t,e){if(e&&("object"===Ua(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function rs(t){return(rs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var os=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ts(t,e)}(i,t);var e,n,r,o=es(i);function i(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="bar-layout",n.bar=t,n.style=e,n.displayLines=!0,n.displayDots=!0,n.setSize(),n}return e=i,(n=[{key:"setHeight",value:function(t){this.height=t,this.lightSize.height=t,this.heavySize.height=t}},{key:"setSize",value:function(){var t=this.style.bar,e=t.lightWidth,n=t.heavyWidth,r=t.lineHeight,o=t.dotSize,i=t.linesSep,a=t.lineDotSep;this.lightSize={width:e,height:r},this.heavySize={width:n,height:r},this.dotSize={width:o,height:o,r:o/2};var s,u=function(){return e+i+n},c=function(){return u()+a+o};switch(this.bar.value){case"|":s=this.lightSize;break;case"||":s={width:2*e+i,height:r};break;case"|]":s={width:u(),height:r};break;case":|":case"|:":s={width:c(),height:r};break;case":|:":s={width:2*c()-n,height:r}}Object.assign(this,s,{dy:s.height})}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!Ya(t,e,n,r||t)&&o)throw new Error("failed to set property")}(rs(i.prototype),"position",t,this,!0);var e=this.bar.value,n=this.style.bar,r=this.x,o=this.y,a=this.cy,s=this.x2,u=new Gr({x:r,y:o},this.lightSize);if(this.linesLayouts=[],"|"===e)this.linesLayouts=[u];else if("||"===e)this.linesLayouts=[u,new Gr({x2:s,y:o},this.lightSize)];else if("|]"===e)this.linesLayouts=[u,new Gr({x2:s,y:o},this.heavySize)];else if(":|"===e||":|:"===e){var c=r+n.dotSize/2,f=(n.dotsSep+n.dotSize)/2;this.dotsLayouts=[new Gr({x:r,cy:a-f},this.dotSize),new Gr({x:r,cy:a+f},this.dotSize)],c=r+n.dotSize+n.lineDotSep,this.linesLayouts=[new Gr({x:c,y:o},this.lightSize),new Gr({x:c+n.lightWidth+n.linesSep,y:o},this.heavySize)],":|:"===e&&(c+=n.lightWidth+2*n.linesSep+n.heavyWidth,this.linesLayouts.push(new Gr({x:c,y:o},this.lightSize)))}if("|:"===e||":|:"===e){var l=(n.dotsSep+n.dotSize)/2;this.dotsLayouts=this.dotsLayouts||[],this.dotsLayouts.push(new Gr({x2:s,cy:a-l},this.dotSize),new Gr({x2:s,cy:a+l},this.dotSize)),"|:"===e&&(this.linesLayouts=[new Gr({x:r,y:o},this.heavySize),new Gr({x:r+n.heavyWidth+n.linesSep,y:o},this.lightSize)])}}},{key:"toJSON",value:function(){var t=this.linesLayouts,e=this.dotsLayouts;return Ka(Ka({},Za(rs(i.prototype),"toJSON",this).call(this)),{},{linesLayouts:t,dotsLayouts:e})}}])&&Ha(e.prototype,n),r&&Ha(e,r),i}(cr);function is(t){return(is="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function as(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ss(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?as(Object(n),!0).forEach((function(e){ps(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):as(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function us(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function cs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function fs(t,e,n){return e&&cs(t.prototype,e),n&&cs(t,n),t}function ls(t,e,n){return(ls="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=ds(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function hs(t,e,n,r){return(hs="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=ds(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else ps(r,e,n);return!0})(t,e,n,r)}function ys(t,e,n,r,o){if(!hs(t,e,n,r||t)&&o)throw new Error("failed to set property");return n}function ps(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ds(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Os(t)););return t}function vs(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&bs(t,e)}function bs(t,e){return(bs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ms(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Os(t);if(e){var o=Os(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ws(this,n)}}function ws(t,e){if(e&&("object"===is(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return gs(t)}function gs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Os(t){return(Os=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ss={"|:":"|:",":|:":"|:","||":"||"},ks={":|":":|",":|:":":|","||":"||","|]":"|]"},js=navigator.userAgent,xs=js.indexOf("Android")>-1||js.indexOf("Adr")>-1,Ps=!!js.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);var Ls=function(t){vs(n,t);var e=ms(n);function n(t,r){var o;return us(this,n),(o=e.call(this)).name="cell-layout",o.cell=t,t.layout=gs(o),o.style=r,o.dataLayout=new Es(t.data,r),o.leftBarLayout=new os(t.leftBar,r),o.rightBarLayout=new os(t.rightBar,r),o.sticks=[],o.dataLayout.sticks=o.sticks,o.height=(xs?90===window.orientation||-90===window.orientation:Ps?90!==window.orientation&&-90!==window.orientation:void 0)?window.innerHeight/40:window.innerHeight/12,o.dy2=o.dataLayout.dy2,o}return fs(n,[{key:"addShownLeftBar",value:function(){var t=this.cell,e=t.leftBar.value;e=Ss[e],t.shownLeftBar=new he(e),this.shownLeftBarLayout=new os(t.shownLeftBar,this.style),this.setMinWidth()}},{key:"addShownRightBar",value:function(){var t=this.cell,e=t.rightBar.value;e=ks[e],t.shownRightBar=new he(e),this.shownRightBarLayout=new os(t.shownRightBar,this.style),this.setMinWidth()}},{key:"setMinWidth",value:function(){var t=this.style.cell,e=t.paddingLeft,n=t.paddingRight,r=this.cell,o=r.shownLeftBarLayout,i=r.shownRightBarLayout;this.minWidth=this.dataLayout.minWidth+e+n+(o?o.width:this.leftBarLayout.width/2)+(i?i.width:this.rightBarLayout.width/2),(!this.width||this.width<this.minWidth)&&(this.width=this.minWidth)}},{key:"reflow",value:function(t){var e=t-this.width;this.width=t,this.dataLayout.width+=e}},{key:"position",set:function(t){ys(Os(n.prototype),"position",t,this,!0);var e=this.x,r=this.x2,o=this.by,i=this.style.cell,a=i.paddingLeft,s=i.paddingRight,u=this.shownLeftBarLayout,c=this.shownRightBarLayout;u&&(u.position={x:e,by:o},e+=u.width+a,this.dataLayout.position={x:e,by:o}),c?(c.position={x2:r,by:o},r=c.x-s,this.dataLayout.position={x2:r,by:o}):(this.rightBarLayout.position={cx:r,by:o+5},r=this.rightBarLayout.x-s,this.dataLayout.position={x2:r,by:o})}},{key:"toJSON",value:function(){var t=this.dataLayout,e=this.leftBarLayout,r=this.rightBarLayout;return ss(ss({},ls(Os(n.prototype),"toJSON",this).call(this)),{},{dataLayout:t,leftBarLayout:e,rightBarLayout:r})}}]),n}(cr),Es=function(t){vs(n,t);var e=ms(n);function n(t,r){var o;return us(this,n),(o=e.call(this)).name="data-layout",o.data=t,o.style=r,o.setLayouts(),o.width=o.minWidth,o.setHeight(),o}return fs(n,[{key:"setLayouts",value:function(){var t=this,e=this.data,n=this.style;this.layouts=[],e.forEach((function(e){switch(e.name){case"note":t.layouts.push(new ji(e,n));break;case"rest":t.layouts.push(new Vi(e,n));break;case"chord":t.layouts.push(new pa(e,n));break;case"multipart":t.layouts.push(new Oa(e,n));break;case"time":t.layouts.push(new za(e,n));break;case"direction":t.layouts.push(new Va(e,n))}}))}},{key:"setMinWidth",value:function(){var t=this.sticks[0],e=a(this.sticks);this.minWidth=t.dx+e.x+e.dx2,this.width=this.minWidth}},{key:"setHeight",value:function(){var t=u(this.layouts.map((function(t){return t.dy})).concat(0)),e=u(this.layouts.map((function(t){return t.dy2})).concat(0));this.height=t+e,this.dy=t}},{key:"position",set:function(t){ys(Os(n.prototype),"position",t,this,!0);var e=this.style.cell,r=(e.dataSep,e.dataDirectionSep),o=this.x,i=this.by;this.sticks.forEach((function(t){var e=t.dirsAbove,n=t.main,a=t.dirsBelow,s=t.x,u=o+s;if(n&&(n.position={bx:u,by:i}),e&&e.length){var c=n.y-r;e[0].position={bx:u,y2:c}}if(a&&a.length){var f=i-8*r;a[0].position={bx:u+8,y:f}}}))}},{key:"toJSON",value:function(){var t=this.layouts;return ss(ss({},ls(Os(n.prototype),"toJSON",this).call(this)),{},{layouts:t})}}]),n}(cr);function Rs(t){return(Rs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function As(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ds(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?As(Object(n),!0).forEach((function(e){Bs(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):As(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ts(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ns(t,e,n){return(Ns="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=zs(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Cs(t,e,n,r){return(Cs="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=zs(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else Bs(r,e,n);return!0})(t,e,n,r)}function Bs(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function zs(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Qs(t)););return t}function Fs(t,e){return(Fs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Ms(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Qs(t);if(e){var o=Qs(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Gs(this,n)}}function Gs(t,e){if(e&&("object"===Rs(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Qs(t){return(Qs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ws=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Fs(t,e)}(i,t);var e,n,r,o=Ms(i);function i(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="measure-layout",n.measure=t,n.style=e,n.cellsLayouts=t.cells.map((function(t){return new Ls(t,e)})),n.makeSticks(),n.alignSticks(),n.setCellsSticks(),n.cellsLayouts.forEach((function(t){t.dataLayout.setMinWidth(),t.setMinWidth()})),n.minWidth=u(n.cellsLayouts.map((function(t){return t.minWidth}))),n.width=n.minWidth,n}return e=i,(n=[{key:"setHeight",value:function(t,e){this.height=t,this.staves=e}},{key:"reflow",value:function(t){this.width=t,this.cellsLayouts.forEach((function(e){return e.reflow(t)}));var e=this.cellsLayouts[0].dataLayout.width;Zs(this.sticks,e),this.setCellsSticks()}},{key:"position",set:function(t){var e=this;!function(t,e,n,r,o){if(!Cs(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Qs(i.prototype),"position",t,this,!0);var n=this.x,r=this.x2,o=this.y;if(this.style.system.stavesSep,this.cellsLayouts.forEach((function(t,r){e.atSysBegin&&t.addShownLeftBar(),e.atSysEnd&&t.addShownRightBar(),t.position={x:n,by:o+e.staves.by0s[r]}})),this.atSysBegin){var a=this.cellsLayouts.length-1;if(!a)return;if(this.connectBars("left",[[0,a]]),!this.leftBarLayouts)return;this.leftBarLayouts.forEach((function(t){return t.position={x:n,y2:o+e.staves.by0s[t.lastCellIndex]}}))}else if(this.atSysEnd){if(this.connectBars("right",this.staves.partsToCellsIndices),!this.rightBarLayouts)return;this.rightBarLayouts.forEach((function(t,n){e.staves.partsToCellsIndices[n],t.position={x2:r,y2:o+e.staves.by0s[t.lastCellIndex]}}))}}},{key:"connectBars",value:function(t,e){var n=this,r=function(t){var e=t.shownLeftBarLayout,n=t.leftBarLayout;return e||n},o=function(t){var e=t.shownRightBarLayout,n=t.rightBarLayout;return e||n};e.forEach((function(e){if(!(e.length<2)){var i=[e[0],a(e)];!function(t,e){if(e[0]!==e[1]){var i=n.staves.by0s[e[1]]-n.staves.by0s[e[0]]+n.style.bar.lineHeight;if("left"===t){n.leftBarLayouts=n.leftBarLayouts||[];var a=r(n.cellsLayouts[e[0]]).bar.value,s=new os(new he(a),n.style);s.setHeight(i),s.displayDots=!1,s.lastCellIndex=e[1],n.leftBarLayouts.push(s)}else if("right"===t){n.rightBarLayouts=n.rightBarLayouts||[];var u=o(n.cellsLayouts[e[0]]).bar.value,c=new os(new he(u),n.style);c.setHeight(i),c.displayDots=!1,c.lastCellIndex=e[1],n.rightBarLayouts.push(c)}}}(t,i),f(i[0],i[1]+1).forEach((function(e){"left"===t?r(n.cellsLayouts[e]).displayLines=!1:"right"===t&&(o(n.cellsLayouts[e]).displayLines=!1)}))}}))}},{key:"makeSticks",value:function(){var t=this.cellsLayouts.map((function(t){return Js(t)}));for(this.sticks=[];qs(t);)this.sticks.push(Is(t))}},{key:"alignSticks",value:function(){var t=this;if(this.sticks.length){var e=this.sticks[0];Vs(e),e.x=e.minX=e.dx,Us(a(this.sticks));var n=Xs(this.sticks);this.sticks.forEach((function(e,r){r>0&&Ks(n,e,t.sticks[r-1],t.style),Hs(n,e)}))}}},{key:"setCellsSticks",value:function(){var t=this;this.sticks.forEach((function(e){e.cells.forEach((function(n,r){var o=Object.assign({},n,e);delete o.cells,t.cellsLayouts[r].sticks.push(o)}))}))}},{key:"toJSON",value:function(){var t=this.cellsLayouts;return Ds(Ds({},Ns(Qs(i.prototype),"toJSON",this).call(this)),{},{cellsLayouts:t})}}])&&Ts(e.prototype,n),r&&Ts(e,r),i}(cr),Js=function(t){var e=[],n={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]};return t.dataLayout.layouts.forEach((function(t){var r=t.note,o=t.rest,i=t.chord,a=t.time,s=t.direction,u=(t.multipart,r||o||i||a);u?(n.tcQ=u.tcQ,n.main=t,u.lyrics&&(n.lyrics=t.lyricsLayouts),e.push(n),n={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]}):s&&(n.tcQ=s.tcQ,"above"===s.placement?n.dirsAbove.push(t):n.dirsBelow.push(t))})),e},qs=function(t){for(var e=0;e<t.length;e++){if(t[e].length)return!0}return!1},Is=function(t){var e=t.map((function(t){return t[0]})),n=s(e.map((function(t){return t?t.tcQ:1/0}))),r=e.map((function(t){return t&&t.tcQ===n?t:null}));return t.forEach((function(t,e){r[e]&&t.shift()})),{cells:r,tcQ:n}},Vs=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"dx",n=0;t.cells.forEach((function(t){if(t){var r=t.main,o=(t.dirsAbove,t.dirsBelow,t.lyrics);r&&(n=Math.max(n,r[e])),o&&(n=u(o.map((function(t){return t[e]})).concat(n).filter((function(t){return void 0!==t}))))}})),t[e]=n},Us=function(t){return Vs(t,"dx2")},Xs=function(t){var e={cells:[]},n=function(t,e,n){var r=e[n].length;r&&(t[n]?t[n].length<r&&(t[n]=l(r)):t[n]=l(r))};return t.forEach((function(t){t.cells.forEach((function(t,r){if(t){var o=e.cells[r]=e.cells[r]||{main:0};t.dirsAbove&&n(o,t,"dirsAbove"),t.dirsBelow&&n(o,t,"dirsBelow"),t.lyrics&&n(o,t,"lyrics")}}))})),e},Ks=function(t,e,n,r){var o=r.cell.dataSep,i=r.note.lyricsHSep,a=n.x+r.stepFont.width/2+o/2;e.cells.forEach((function(e,n){if(e){var r=t.cells[n],s=e.main,u=(e.dirsAbove,e.dirsBelow,e.lyrics);s&&(a=Math.max(a,r.main+o+s.dx)),u&&u.forEach((function(t,e){a=Math.max(a,r.lyrics[e]+i+t.dx)}))}})),e.x=a,e.minX=a},Hs=function(t,e){e.cells.forEach((function(n,r){if(n){var o=t.cells[r],i=n.main,a=(n.dirsAbove,n.dirsBelow,n.lyrics);i&&(o.main=e.x+i.dx2),a&&a.forEach((function(t,n){o.lyrics[n]=e.x+t.dx2}))}}))},Zs=function(t,e){if(!(t.length<=1)){var n,r,o,i=t[0],s=i.dx,u=i.minX,c=a(t),f=c.dx2,l=(c.minX,e-s-f);n=a(t).tcQ,r=t.length,o=function(t){var e=n?t.tcQ/n:1;return l*e+s},function(t,e){for(var n=t.length-1;n>=0;n--)e(t[n],n)}(t,(function(e,n){if(n!==r-1){var i=t[n+1],a=o(e),s=i.minX-e.minX,u=i.x-s;e.x=Math.min(a,u)}else e.x=o(e)})),t.forEach((function(e,n){if(0!==e.tcQ){var r=t[n-1],o=e.minX-r.minX;e.x-r.x<o&&(e.x=r.x+o)}else e.x=e.minX}))}};function Ys(t){return(Ys="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function $s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?_s(Object(n),!0).forEach((function(e){ru(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):_s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function tu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function eu(t,e,n){return(eu="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=ou(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function nu(t,e,n,r){return(nu="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=ou(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else ru(r,e,n);return!0})(t,e,n,r)}function ru(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ou(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=uu(t)););return t}function iu(t,e){return(iu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function au(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=uu(t);if(e){var o=uu(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return su(this,n)}}function su(t,e){if(e&&("object"===Ys(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function uu(t){return(uu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var cu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&iu(t,e)}(i,t);var e,n,r,o=au(i);function i(t,e,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="system-layout",r.headLayout=t,r.measures=e,r.style=n;var a=e.length;return r.measuresLayouts=e.map((function(t,e){var r=new Ws(t,n);return r.atSysBegin=0===e,r.atSysEnd=e===a-1,r})),r.setHeight(),r}return e=i,(n=[{key:"setHeight",value:function(){var t=this;if(this.measuresLayouts.length){var e=l(this.measuresLayouts[0].cellsLayouts.length),n=this.measuresLayouts[0].measure,r=n.partIndices,o=n.partsToCellsIndices;this.staves={partIndices:r,partsToCellsIndices:o,heights:e,dys:e.slice(),dy2s:e.slice(),y0s:[],by0s:[],y20s:[]},this.measuresLayouts.forEach((function(e){e.cellsLayouts.forEach((function(e,n){t.staves.dys[n]=Math.max(t.staves.dys[n],e.dy),t.staves.dy2s[n]=Math.max(t.staves.dy2s[n],e.dy2),t.staves.heights[n]=t.staves.dys[n]+t.staves.dy2s[n]}))})),this.setY0s(),this.height=a(this.staves.y20s),this.headLayout.height=this.height,this.headLayout.staves=this.staves,this.measuresLayouts.forEach((function(e){e.setHeight(t.height,t.staves)}))}else this.height=0}},{key:"setY0s",value:function(){var t=this,e=this.style.system.stavesSep,n=0;this.staves.heights.forEach((function(r,o){t.staves.y0s.push(n),t.staves.by0s.push(n+t.staves.dys[o]),t.staves.y20s.push(n+t.staves.heights[o]),n+=r+e}))}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!nu(t,e,n,r||t)&&o)throw new Error("failed to set property")}(uu(i.prototype),"position",t,this,!0);var e=this.x,n=this.y2;this.headLayout.position={x:e,y2:n},e+=this.headLayout.width,this.measuresLayouts.forEach((function(t){t.position={x:e,y2:n},e+=t.width}))}},{key:"toJSON",value:function(){var t=this.headLayout,e=this.measuresLayouts;return $s($s({},eu(uu(i.prototype),"toJSON",this).call(this)),{},{headLayout:t,measuresLayouts:e})}}])&&tu(e.prototype,n),r&&tu(e,r),i}(cr);function fu(t){return(fu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function lu(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hu(t,e)}function hu(t,e){return(hu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function yu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=du(t);if(e){var o=du(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return pu(this,n)}}function pu(t,e){if(e&&("object"===fu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function du(t){return(du=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function vu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function bu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function mu(t,e,n){return e&&bu(t.prototype,e),n&&bu(t,n),t}var wu=function(){function t(){vu(this,t)}return mu(t,[{key:"isBalanced",get:function(){return this.maxLen-this.minLen<=1}},{key:"maxLen",get:function(){return u(this.lines.map((function(t){return t.len})))}},{key:"minLen",get:function(){return s(this.lines.map((function(t){return t.len})))}}]),t}(),gu=function(t){lu(n,t);var e=yu(n);function n(t){var r,o=t.measures,i=t.fhsw,a=t.ahsw,s=t.style;return vu(this,n),(r=e.call(this)).measures=o,r.measureMinWidths=o.map((function(t){return new Ws(t,s)})).map((function(t){return t.minWidth})),r.fhsw=i,r.ahsw=a,r.lines=[],r}return mu(n,[{key:"lens",get:function(){return this.lines.map((function(t){return t.len}))},set:function(t){var e=this;t.length&&0!==t[0]&&(this.lines=[],t.forEach((function(t,n){var r=n?e.ahsw:e.fhsw;e.lines.push(new Ou(r))})),this.set("mws","measureMinWidths",t),this.set("measures"),this.set("ws"),this.setIsObstacles())}},{key:"obstacleSectioning",value:function(){var t,e=this,n=[],r=0,o=!1;return this.lines.forEach((function(i,a){if(o)return r=a,void(o=!1);i.isObstacle&&(t=a,n.push(new Su(e.lines.slice(r,t)))),o=i.isObstacle})),o||n.push(new Su(this.lines.slice(r,this.lines.length))),n}},{key:"mergeSections",value:function(t){var e=(t=t.slice()).shift().lines;this.lines.forEach((function(n){if(n.isObstacle){e.push(n);var r=t.shift();r&&(e=e.concat(r.lines))}})),this.lines=e}},{key:"set",value:function(t,e,n){var r=this;if(e=e||t,"ws"!==t){var o,i=0;(n||this.lens).forEach((function(n,a){o=i+n,r.lines[a][t]=r[e].slice(i,o),i=o}))}else this.lines.forEach((function(t){t.ws=t.mws.slice()}))}},{key:"setIsObstacles",value:function(){var t=this;this.lines.forEach((function(e,n){if(0===n)e.isObstacle=!1;else{var r=t.lines[n-1];r.isObstacle?e.isObstacle=!1:e.isObstacle=a(r.mws)+e.mws[0]>e.sw}}))}}]),n}(wu),Ou=function(){function t(e){vu(this,t),this.mws=[],this.ws=[],this.measures=[],this.sw=e}return mu(t,[{key:"len",get:function(){return this.mws.length}},{key:"optimizeMeasureWidths",value:function(){var t=this.sw,e=this.ws.map((function(t,e){return{i:e,w:t}})),n=function(n){var r=c(e.slice(n+1).map((function(t){return t.w})).concat(0)),o=(t-r)/(n+1);n<e.length-1&&(o=Math.min(o,e[n+1].w)),f(n+1).forEach((function(t){e[t].w=o}))};e.sort((function(t,e){return t.w-e.w}));for(var r=0;r<e.length&&(n(r),!(c(e.map((function(t){return t.w})))>=t));r++);e.sort((function(t,e){return t.i-e.i})),this.ws=e.map((function(t){return t.w}))}}]),t}(),Su=function(t){lu(n,t);var e=yu(n);function n(t){var r;return vu(this,n),(r=e.call(this)).lines=t,r}return mu(n,[{key:"balanceReflow",value:function(){for(var t=this.lines,e=function(t,e){return t[e+1].unshift(t[e].pop())};!this.isBalanced;){var r=this.findMaxLenLineIndex(),o=t.map((function(t){return t.mws.slice()}));if(r===t.length-1)break;for(var i=r;i<t.length-1;i++)for(e(o,i);o.length>1&&c(o[i])>t[i].sw;)e(o,i);var s=new n(t.slice(0,t.length-1)).maxLen;if(a(o).length>s)break;if(c(a(o))>a(t).sw)break;this.updateLines(o)}}},{key:"equalReflow",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1/0,e=this.lines;if(e.length){var n=s(e.map((function(t){return t.sw}))),r=u(o(e.map((function(t){return t.mws})))),i=Math.floor(n/r),a=Math.ceil(c(e.map((function(t){return t.len})))/e.length);t=Math.min(t,i,a);var f,l,h=0,y=function(){f=e[h],l=e[h+1],f.len>t&&!l&&(l=new Ou(f.sw),e.push(l))},p=function(t){l.mws.unshift(t.mws.pop()),l.ws.unshift(t.ws.pop()),l.measures.unshift(t.measures.pop())};for(y();l;){for(;f.len>t;)p(f);h++,y()}e.forEach((function(t){var n=u(e.map((function(t){return t.len}))),r=t.sw/n;t.ws=t.ws.map((function(){return r}))}))}}},{key:"findMaxLenLineIndex",value:function(){var t=this.maxLen;return function(t,e){for(var n=t.length-1;n>=0;n--)if(e(t[n],n))return n}(this.lines,(function(e){return e.len===t}))}},{key:"updateLines",value:function(t){var e=this.lines;e.forEach((function(e,n){e.mws=t[n],e.ws=e.mws.slice()}));for(var n=0;n<e.length-1;n++)for(var r=e[n],o=e[n+1];r.measures.length>r.mws.length;)o.measures.unshift(r.measures.pop())}}]),n}(wu);function ku(t){return(ku="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ju(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function xu(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ju(Object(n),!0).forEach((function(e){Ru(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ju(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Pu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Lu(t,e,n){return(Lu="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Au(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Eu(t,e,n,r){return(Eu="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=Au(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else Ru(r,e,n);return!0})(t,e,n,r)}function Ru(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Au(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Cu(t)););return t}function Du(t,e){return(Du=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Tu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Cu(t);if(e){var o=Cu(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Nu(this,n)}}function Nu(t,e){if(e&&("object"===ku(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Cu(t){return(Cu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Bu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Du(t,e)}(i,t);var e,n,r,o=Tu(i);function i(t,e){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="body-layout",n.parts=t.parts,n.measures=t.measures,n.style=e,n.setWidth(),n.makeSystemsLayouts(),n.markCurvesSys(),n.markLyricsSys(),n.setHeight(),n}return e=i,(n=[{key:"setWidth",value:function(){var t=this.style.score,e=t.width,n=t.marginLeft,r=t.marginRight;this.width=e-n-r}},{key:"setHeight",value:function(){var t=this.systemsLayouts;this.height=t.length?c(t.map((function(t){return t.height})))+(t.length-1)*this.style.body.systemsSep:0}},{key:"createSystemHeadLayout",value:function(t){var e={nameType:t,partHeads:this.parts.map((function(t){return t.head}))},n=this.measures[0];return n&&(e.partsToCellsIndices=n.partsToCellsIndices),new Dr(e,this.style)}},{key:"makeSystemsLayouts",value:function(){var t=this,e=this.style.system.align,n=this.flowSystems();"justify"===e?(this.balanceSystems(n),n.lines.forEach((function(t){return t.optimizeMeasureWidths()}))):"equal"===e&&this.equalizeSystems(n),this.systemsLayouts=[],n.lines.forEach((function(e,n){var r=t.createSystemHeadLayout(n?"abbreviation":"full"),o=e.measures,i=new cu(r,o,t.style);i.width=t.width,t.systemsLayouts.push(i)})),"justify"!==e&&"equal"!==e||this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t,r){var o=n.lines[e].ws[r];t.reflow(o)}))}))}},{key:"flowSystems",value:function(){var t=this.width,e=this.createSystemHeadLayout("full").width,n=this.createSystemHeadLayout("abbreviation").width,r=new gu({measures:this.measures,fhsw:t-e,ahsw:t-n,style:this.style}),o=r.measureMinWidths,i=[],s=e;o.forEach((function(e,r){(s+=e)===t?(i.push(r+1),s=n):s>t&&(i.push(r),s=n+e)})),a(i)!==o.length&&i.push(o.length);for(var u=i.length-1;u>0;u--)i[u]=i[u]-i[u-1];return r.lens=i,r}},{key:"balanceSystems",value:function(t){t.isBalanced||t.obstacleSectioning().forEach((function(t){return t.balanceReflow()}))}},{key:"equalizeSystems",value:function(t){var e=t.obstacleSectioning();e.forEach((function(t){return t.equalReflow(1/0)})),t.mergeSections(e),t.lines.forEach((function(t){t.isObstacle&&t.optimizeMeasureWidths()}))}},{key:"markCurvesSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(n){n.cellsLayouts.forEach((function(n,r){var o=function(n){n.systemLayout=t,n.sys=e,n.c=r};n.dataLayout.layouts.forEach((function(t){var e=t.tieLayout,n=t.beginSlursLayouts,r=t.endSlursLayouts,i=t.chord;e&&o(e),n&&n.forEach((function(t){return o(t)})),r&&r.forEach((function(t){return o(t)})),i&&t.pitchesLayout.layouts.forEach((function(t){t.tieLayout&&o(t.tieLayout)}))}))}))}))}))}},{key:"markLyricsSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t){t.cellsLayouts.forEach((function(t){t.dataLayout.layouts.forEach((function(t){var n=t.lyricsLayouts;n&&n.forEach((function(t){t.sys=e}))}))}))}))}))}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!Eu(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Cu(i.prototype),"position",t,this,!0);var e=this.style.body.systemsSep,n=this.x,r=this.y;this.systemsLayouts.forEach((function(t){t.position={x:n,y:r},r+=t.height+e}))}},{key:"toJSON",value:function(){var t=this.systemsLayouts;return xu(xu({},Lu(Cu(i.prototype),"toJSON",this).call(this)),{},{systemsLayouts:t})}}])&&Pu(e.prototype,n),r&&Pu(e,r),i}(cr);function zu(t){return(zu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fu(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Mu(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Fu(Object(n),!0).forEach((function(e){qu(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Fu(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Gu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Qu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Wu(t,e,n){return(Wu="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Iu(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function Ju(t,e,n,r){return(Ju="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var o,i=Iu(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(r,n),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(r,e)){if(!o.writable)return!1;o.value=n,Object.defineProperty(r,e,o)}else qu(r,e,n);return!0})(t,e,n,r)}function qu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Iu(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Hu(t)););return t}function Vu(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Uu(t,e)}function Uu(t,e){return(Uu=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Xu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Hu(t);if(e){var o=Hu(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ku(this,n)}}function Ku(t,e){if(e&&("object"===zu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Hu(t){return(Hu=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Zu=function(t){Vu(i,t);var e,n,r,o=Xu(i);function i(t){var e;Gu(this,i),(e=o.call(this)).name="score-layout",e.score=t;var n=e.style=t.style.value;return e.bodyLayout=new Bu(t.body,n),e.setSize(),e.innerLayout=new Yu(e.height,n),e.position={x:0,y:0},e}return e=i,(n=[{key:"setSize",value:function(){var t=this.style.score,e=t.width,n=t.marginTop,r=t.marginBottom,o=(t.headBodySep,this.bodyLayout.height);this.width=e,this.height=n+r+o}},{key:"position",set:function(t){!function(t,e,n,r,o){if(!Ju(t,e,n,r||t)&&o)throw new Error("failed to set property")}(Hu(i.prototype),"position",t,this,!0);var e=this.style.score,n=e.marginLeft,r=e.marginTop;e.headBodySep,this.bodyLayout.position={x:n,y:r},this.innerLayout.position={x:n,y:r}}},{key:"toJSON",value:function(){var t=this.innerLayout,e=this.headLayout,n=this.bodyLayout;return Mu(Mu({},Wu(Hu(i.prototype),"toJSON",this).call(this)),{},{innerLayout:t,headLayout:e,bodyLayout:n})}}])&&Qu(e.prototype,n),r&&Qu(e,r),i}(cr),Yu=function(t){Vu(n,t);var e=Xu(n);function n(t,r){var o;Gu(this,n),(o=e.call(this)).name="inner-layout";var i=r.score,a=i.width,s=i.marginLeft,u=i.marginRight,c=i.marginTop,f=i.marginBottom;return o.width=a-s-u,o.height=t-c-f,o}return n}(cr);function _u(t){return(_u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function $u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function tc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ec(t,e,n){return e&&tc(t.prototype,e),n&&tc(t,n),t}var nc=[],rc=nc.push,oc=nc.pop,ic=nc.shift,ac=nc.unshift,sc=nc.splice,uc=nc.reverse,cc=function(t){return t&&"appendChild"in t&&"removeChild"in t},fc=function(t){return t&&"element"===t.name&&"elName"in t},lc=h(["mousedown","mouseup","click","dblclick","mousemove","mouseover","mousewheel","mouseout","contextmenu","touchstart","touchmove","touchend","touchcancel","keydown","keypress","keyup","focus","blur","change","submit","scroll","resize","hashchange","load","unload","input"]),hc=h(["text","number","password","textarea","color","range","date","datetime-local","month","week","time","email","file","search","tel","url","select-multiple","select-one"]),yc=h(["svg:a","animate","animateMotion","animateTransform","circle","clipPath","color-profile","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","solidcolor","stop","style","svg","switch","symbol","text","textPath","title","tspan","unknown","use","view"]),pc=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;$u(this,t),this.toJSON=v("elName","attrs","content"),this.name="element",this.level=r,this.indent=o,this.elName=e.elName,this.attrs=new dc(e.attrs),this.content=[],e.content.forEach((function(e){void 0===e?n.content.push("undefined"):null===e?n.content.push("null"):"element"===e.name?n.content.push(new t(e,r+1,o)):n.content.push(e)}))}return ec(t,[{key:"eachChild",value:function(t){this.content.forEach(t)}},{key:"eachAttr",value:function(t){this.attrs.each(t)}},{key:"create",value:function(){var e,n=this.elName;this.content;return yc[n]?("svg:a"===n&&(n="a"),e=document.createElementNS("http://www.w3.org/2000/svg",n)):e=document.createElement(n),this.eachAttr((function(t,n){lc[n]?e.addEventListener(n,t):"value"===n?"function"==typeof t?(t({element:e,attrName:n}),hc[e.type]&&e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):e.value=t:"checked"===n&&"checkbox"===e.type?"function"==typeof t?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.checked}))):e.checked=t:"checkedValue"===n&&"radio"===e.type?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):"selectedIndex"===n?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.selectedIndex}))):"selectedOptions"===n?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=Array.from(e.selectedOptions).map((function(t){return{label:t.label,value:t.value,text:t.text}}))}))):"function"==typeof t?t({element:e,attrName:n}):"style"===n?(/\n/.test(t)&&(t=t.trim().replace(/ *\n */g,";")),e.setAttribute(n,t)):t&&e.setAttribute(n,t),"svg"===e.localName&&"width"===n&&0==t&&(e.removeAttribute("width"),e.style.width="100vw")})),this.eachChild((function(n){if(n instanceof t)e.appendChild(n.create());else if("object"===_u(n))"html"in n?"function"==typeof n.html?n.html(e,"html"):e.innerHTML=n.html:e.appendChild(n);else if("function"==typeof n)n(e);else{var r=document.createTextNode(n);e.appendChild(r)}})),e}},{key:"toString",value:function(){var t=this.level,e=this.indent,n=this.elName,r=this.attrs,o=this.content,a=[];return t>0&&a.push("\n"+i(" ",t*e)),a.push("<".concat(n)),r.hasAttr&&a.push(" "+r),0===o.length?a.push("/>"):"element"!==o[0].name?a.push(">".concat(o,"</").concat(n,">")):(a.push(">",o.join("")),a.push("\n",i(" ",t*e),"</".concat(n,">"))),a.join("")}}]),t}(),dc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};$u(this,t),this.toJSON=v("value"),this.name="attrs",this.value=e}return ec(t,[{key:"hasAttr",get:function(){return Object.keys(this.value).length>0}},{key:"each",value:function(t){var e=this.value;Object.keys(e).forEach((function(n,r){return t(e[n],n,r)}))}},{key:"toString",value:function(){var t=[];for(var e in this.value)t.push("".concat(e,'="').concat(this.value[e],'"'));return t.join(" ")}}]),t}();function vc(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return Array.isArray(n)||(n=[n]),("object"!==_u(e)||fc(e)||cc(e))&&(e=[e]),Array.isArray(e)&&(n=e,e={}),{name:"element",elName:t,attrs:e,content:n=o(n)}}vc.create=function(t,e,n){return new pc(vc(t,e,n)).create()};var bc=function(){function t(e,n){$u(this,t),this.obj=e,this.name=n}return ec(t,[{key:"create",value:function(t,e,n){var r=vc.create(t,e,n);return this.obj[this.name]=r,r}}]),t}();vc.assign=function(t,e){return new bc(t,e)};var mc=function(){function t(e,n){$u(this,t),this.obj=e,this.name=n}return ec(t,[{key:"create",value:function(t,e,n){var r=vc.create(t,e,n);return this.obj[this.name]=this.obj[this.name]||[],this.obj[this.name].push(r),r}}]),t}();vc.push=function(t,e){return new mc(t,e)},vc.html=function(t,e,n){return void 0===n&&(n=e,e={}),vc(t,e,{html:n})},vc.nbsp=function(t){return i(" ",t)};var wc=0,gc=function(){return""+wc++},Oc=function(t,e){return fc(t)&&(t=new pc(t).create()),t.dataset.key=e,t},Sc=function(){function t(e){var n=this;$u(this,t),this.defaultData=function(t){var e={},n={},r=Object.keys(t);r.forEach((function(n){var r=t[n],o="_".concat(n),i=r.get,a=r.el;i||a?Object.defineProperty(e,n,{get:function(){return o in this?this[o]:this[o]=(i||a).apply(this)}}):e[n]=r})),r.forEach((function(t){n[t]=e[t]}));var o={$collector:[]};return r.forEach((function(t){var e="_".concat(t);Object.defineProperty(o,t,{get:function(){return this.$collector.push(t),e in this?this[e]:n[t]},set:function(t){this[e]=t}})})),r.forEach((function(e){var n=t[e],r=n.get,i=n.el,a=n.dep;(r||i)&&(r||i).apply(o),a=y(o.$collector.concat(a||[])),o.$collector.length=0,a.length&&(t[e].dep=a)})),{data:t,defaultData:n}}(e).defaultData,Object.assign(this,e),this.cacheElements={},this.depGetters={},this.makeConnectors(),Object.keys(this.defaultData).forEach((function(t){n["_".concat(t)]=n.defaultData[t]}))}return ec(t,[{key:"set",value:function(t,e){e(this[t]),this[t]=this[t]}},{key:"makeConnectors",value:function(){var t=this;Object.keys(this).forEach((function(e){"cacheElements"!==e&&"depGetters"!==e&&"defaultData"!==e&&t.hasOwnProperty(e)&&(t.cacheElements[e]=[],t["$".concat(e)]=t.makeConnector(e),t.makeAccessor(e))}))}},{key:"makeConnector",value:function(t){this[t].get;if(Array.isArray(this.defaultData[t]))return this.makeArrayConnector(t);if(this[t].el)return this.makeElConnector(t);var e=this,n=function(n,r){var o=e.cacheElements[t].length;if(e.cacheElements[t].push(n),r){var i="_".concat(t,"_html");e[i]=e[i]||[],e[i][o]=!0}e[t]=e[t]};return n.data=this,n.dname=t,n}},{key:"makeArrayConnector",value:function(t){var e=this,n=function n(r){e.cacheElements[t].push({parent:r,children:[],map:r.attrName?"":n._map.shift()}),e[t]=e[t]};n.data=this,n.dname=t,n._map=[];var r=function(t){return vc("pre",JSON.stringify(t))};return n.map=function(t){return n._map.push(t||r),n},n}},{key:"makeElConnector",value:function(t){var e=this;return function(n){e.cacheElements[t].push({parent:n,child:null}),e[t]=e[t]}}},{key:"makeAccessor",value:function(t){var e=this,n="_".concat(t),r=this[t],o=r.get,i=r.set,a=r.el,s=r.dep;s&&s.forEach((function(n){e.depGetters[n]=e.depGetters[n]||[],e.depGetters[n].push(t)})),o&&s?Array.isArray(this.defaultData[t])?this.makeGetArrayAccessor(t,n,o,i):Object.defineProperty(this,t,{get:function(){return this[n]},set:function(e){this[n]=o.apply(this),i&&void 0!==e&&i.call(this,e),this.runSetter(t,this[t])}}):a&&s?Object.defineProperty(this,t,{get:a,set:function(){this.runElSetter(t)}}):(Array.isArray(r)?this.makeArrayAccessor(t,n):Object.defineProperty(this,t,{get:function(){return this[n]},set:function(e){this[n]=e,this.runSetter(t,e)}}),this[t]=r)}},{key:"alterArrayMethods",value:function(t,e){var n=this.cacheElements[t],r=this;return Object.assign(e,{push:function(){var e=this,o=Array.from(arguments);o.forEach((function(t){var r=gc();e.keys.push(r),n.forEach((function(e){var n=Oc(e.map(t));e.children.push(n),e.parent.appendChild(n)}))}));var i=rc.apply(this,o);return r.setDepProp(t),i},pop:function(){n.forEach((function(t){var e=t.children.pop();e&&t.parent.removeChild(e)})),this.keys.pop();var e=oc.apply(this);return r.setDepProp(t),e},shift:function(){n.forEach((function(t){var e=t.children.shift();e&&t.parent.removeChild(e)})),this.keys.shift();var e=ic.apply(this);return r.setDepProp(t),e},unshift:function(){var e=this,o=Array.from(arguments);o.slice().reverse().forEach((function(t){var r=gc();e.keys.unshift(r),n.forEach((function(e){var n=Oc(e.map(t),r);e.children.unshift(n),e.parent.prepend(n)}))}));var i=ac.apply(this,o);return r.setDepProp(t),i},splice:function(){var e=Array.from(arguments),n=sc.apply(this,e);return r.runArraySetter(t,this),n},reverse:function(){n.forEach((function(t){t.parent.textContent="",t.children.reverse(),t.children.forEach((function(e){t.parent.appendChild(e)}))})),this.keys.reverse();var e=uc.apply(this);return r.setDepProp(t),e},indexOfEl:function(t){var e=function(t){for(var e;t;){if(e=t.dataset.key)return e;t=t.parentNode}}(t);return this.keys.indexOf(e)},itemOfEl:function(t){return this[this.indexOfEl(t)]},removeAt:function(t){if(t>-1)return this.splice(t,1)},remove:function(t){var e=this.findIndex((function(e){return e===t}));return this.removeAt(e)}}),e}},{key:"makeArrayAccessor",value:function(t,e){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(n){this[e]=this.alterArrayMethods(t,n),this.runArraySetter(t,n)}})}},{key:"makeGetArrayAccessor",value:function(t,e,n,r){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(o){o=this[e]=n.apply(this)||[],r&&r.call(this,o),this[e]=this.alterArrayMethods(t,o),this.runArraySetter(t,o)}})}},{key:"runSetter",value:function(t,e){var n=this;this.cacheElements[t].forEach((function(r,o){var i,a="_".concat(t,"_html");r.attrName&&(i=r.attrName,r=r.element),"value"===i?r!==document.activeElement&&(r.value=e):"checked"===i?r.checked=e:"checkedValue"===i?r.value===e&&(r.checked=!0):"selectedIndex"===i||(i?r.setAttribute(i,e):n[a]&&n[a][o]?r.innerHTML=e:r.textContent=e)})),this.setDepProp(t)}},{key:"runArraySetter",value:function(t,e){e.keys=e.map(gc),this.cacheElements[t].forEach((function(t){t.parent.attrName||(t.parent.textContent="",t.children.length=0,t.children=e.map((function(n,r){var o=Oc(t.map(n,r),e.keys[r]);return t.parent.appendChild(o),o})))})),this.setDepProp(t)}},{key:"runElSetter",value:function(t){var e=this;this.cacheElements[t];this.cacheElements[t].forEach((function(n){n.child&&n.parent.removeChild(n.child);var r=e[t];fc(r)&&(r=new pc(r).create()),n.child=r,n.parent.appendChild(r)})),this.setDepProp(t)}},{key:"setDepProp",value:function(t){var e=this;this.depGetters[t]&&this.depGetters[t].forEach((function(t){/^__link_/.test(t)?e[t]():e[t]=void 0}))}}]),t}();vc.setData=function(t){return new Sc(t)};var kc=0,jc=function(){return"__link_"+kc++};vc.linkData=function(){var t=Array.from(arguments),e=t.shift(),n=t.pop(),r=jc();t.forEach((function(t){e.depGetters[t].push(r),e[r]=n}))},vc.linkData=function(){var t=Array.from(arguments),e=t.pop(),n=xc(t);n.forEach((function(t){var n=t.shift(),r=t,o=jc();r.forEach((function(t){n.depGetters[t]=n.depGetters[t]||[],n.depGetters[t].push(o),n[o]=e}))})),e()};var xc=function(t){var e=[],n=[];return t.forEach((function(t){switch(_u(t)){case"object":n.length>=2&&e.push(n),n=[t];break;case"string":n.push(t);break;default:throw new TypeError("Incorrect el.linkData parameter ".concat(t,"."))}})),e.push(n),e};function Pc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Lc=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=""}var e,n,r;return e=t,(n=[{key:"moveTo",value:function(t,e){return this.data+="M".concat(t," ").concat(e),this}},{key:"moveBy",value:function(t,e){return this.data+="m".concat(t," ").concat(e),this}},{key:"lineTo",value:function(t,e){return this.data+="L".concat(t," ").concat(e),this}},{key:"lineBy",value:function(t,e){return this.data+="l".concat(t," ").concat(e),this}},{key:"horiTo",value:function(t){return this.data+="H".concat(t),this}},{key:"horiBy",value:function(t){return this.data+="h".concat(t),this}},{key:"vertTo",value:function(t){return this.data+="V".concat(t),this}},{key:"vertBy",value:function(t){return this.data+="v".concat(t),this}},{key:"curveTo",value:function(t,e,n,r,o,i){return this.data+="C".concat(t," ").concat(e,",").concat(n," ").concat(r,",").concat(o,", ").concat(i),this}},{key:"curveBy",value:function(t,e,n,r,o,i){return this.data+="C".concat(t," ").concat(e,",").concat(n," ").concat(r,",").concat(o,", ").concat(i),this}},{key:"close",value:function(){return this.data+="Z",this}},{key:"lines",value:function(t){var e=this;return Array.isArray(t)||(t=[t]),t.forEach((function(t){var n=t.x,r=t.y;e.moveTo(n[0],r[0]),n.forEach((function(t,n){return e.lineTo(t,r[n])}))})),this.data}},{key:"toString",value:function(){return this.data}}])&&Pc(e.prototype,n),r&&Pc(e,r),t}();function Ec(){return new Lc}function Rc(t){var e,n=t.tie,r=t.slur,o=t.lift,i=t.strokeWidth;n?e=t.showPrev?t.prevEndPoints:t.endPoints:r&&(e="("===r.value?t.endPoints:t.prevEndPoints);var a=e,s=a.x1,u=a.y1,c=a.x2,f=a.y2,l=c-s,h=f-u,y=s+l/6,p=u+h/6-o,d=c-l/6,v=f-h/6-o,b=y,m=p+i,w=d,g=v+i,O=.1*i,S=vc.create("path",{d:Ec().moveTo(s,u).horiBy(-O).curveTo(y,p,d,v,c,f).horiBy(-O).curveTo(w,g,b,m,s,u).close(),style:"fill: black"}),k=function(t){S.style.fill=t};return n?(n.onplay=function(){return k("#FFAD00")},n.onstop=function(){return k("black")}):r&&(r.onplay=function(){return k("#FFAD00")},r.onstop=function(){return k("black")}),vc.create("g",[S])}function Ac(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Dc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ac(Object(n),!0).forEach((function(e){Tc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ac(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Tc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Nc(t){var e=t.pitch,n=t.stepLayout,r=t.accidentalLayout,o=t.octavesLayout,i=t.tieLayout,a=t.tieMode,s="\n    font-family: ".concat(n.family,"\n    font-size: ").concat(n.size,"\n    text-anchor: middle\n  "),u="\n    font-family: ".concat(r.family,"\n    font-size: ").concat(r.size,"\n    text-anchor: middle\n  "),c={},f=function(t){c.step.style.fill=t,e.accidental&&(c.accidental.style.fill=t),e.octave&&c.octaves.forEach((function(e){e.style.fill=t}))};return 72.70000000000002==n.cxby.y&&(n.cxby.y=78.40000000000002),e.onplay=function(){return f("#FFAD00")},e.onstop=function(){return f("black")},vc.create("g",[vc.assign(c,"step").create("text",Dc(Dc({},n.cxby),{},{style:s}),e.step),e.accidental?vc.assign(c,"accidental").create("text",Dc(Dc({},r.cxby),{},{style:u}),r.char):[],e.octave?o.layouts.map((function(t){return vc.push(c,"octaves").create("circle",t.circle)})):[],function(t){return!(!t||"single"===a)&&("end"!==t.tie.type||t.showPrev)}(i)?Rc(i):[]])}function Cc(t){var e=t.linesLayout,n=t.beamsLayout,r=t.dotsLayout,i=t.duration,a=i.type,s=i.dots,u={},c=function(t){a<4?u.lines.forEach((function(e){e.style.fill=t})):u.beams&&u.beams.forEach((function(e){e.style.fill=t})),s&&u.dots.forEach((function(e){e.style.fill=t}))};return i.onplay=function(){return c("#FFAD00")},i.onstop=function(){return c("black")},vc.create("g",[a<4?e.layouts.map((function(t){return vc.push(u,"lines").create("rect",t.rect)})):[],a>4?o(n.layouts.map((function(t){var e=t.beam.type;if("single"===e||"begin"===e){var n=Object.assign({},t.rect);return"begin"===e&&(n.width=t.beamedWidth),vc.push(u,"beams").create("rect",n)}return[]}))):[],s&&2!==a?r.layouts.map((function(t){return vc.push(u,"dots").create("circle",t.circle)})):[]])}function Bc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function zc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Bc(Object(n),!0).forEach((function(e){Fc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Bc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Fc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Mc(t){var e=t.tuplet,n=t.textLayout,r=t.lift,o=t.strokeWidth,i=t.pitchTupletSep,a=t.endPoints,s=a.x1,u=a.y1,c=a.x2,f=a.y2,l=(s+c)/2,h=n.width/2,y=(f-u)/(c-s),p=l-h-3,d=(u-=i)-r+y*(p-s),v=l+h+3,b=(f-=i)-r+y*(v-c),m=vc.create("path",{d:Ec().moveTo(s,u).vertBy(-r).lineTo(p,d).moveTo(c,f).vertBy(-r).lineTo(v,b),style:"stroke-width: ".concat(o,"; stroke: black; fill: none")}),w={},g=function(t){m.style.stroke=t,w.text.style.fill=t};e.onplay=function(){return g("#FFAD00")},e.onstop=function(){return g("black")};var O,S,k;return vc.create("g",[m,vc.assign(w,"text").create("text",zc(zc({},n.cxcy),{},{style:(O=n,S=O.family,k=O.size,"\n    font-family: ".concat(S,"\n    font-size: ").concat(k,"\n    text-anchor: middle\n    alignment-baseline: middle\n  "))}),n.text)])}function Gc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Qc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Gc(Object(n),!0).forEach((function(e){Wc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Gc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Wc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Jc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function qc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Jc(Object(n),!0).forEach((function(e){Ic(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Jc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Ic(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Vc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Uc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Vc(Object(n),!0).forEach((function(e){Xc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Vc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Xc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Kc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Hc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Kc(Object(n),!0).forEach((function(e){Zc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Kc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Zc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Yc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function _c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Yc(Object(n),!0).forEach((function(e){$c(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Yc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function $c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function tf(t){t.bar;var e=t.linesLayouts,n=t.dotsLayouts,r=t.displayLines,o=t.displayDots;return vc.create("g",[r?e.map((function(t){return vc("rect",t.rect)})):[],o&&n?n.map((function(t){return vc("circle",t.circle)})):[]])}function ef(t){var e=t.dataLayout,n=(t.shownLeftBarLayout,t.rightBarLayout),r=t.shownRightBarLayout;return vc.create("g",[e.layouts.map((function(t){return"note"in t?(n=(e=t).note,r=e.pitchLayout,i=e.durationLayout,a=e.tieLayout,s=e.tupletLayout,u=e.beginSlursLayouts,c=e.endSlursLayouts,f=e.lyricsLayouts,l=function(t){var e=t.family,n=t.size,r=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(n,"\n    text-anchor: ").concat(r||"begin","\n  ")},h={},y=function(t){var e=h.lyrics,n=h.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),n&&n.forEach((function(e){return e.style.fill=t}))},n.onplay=function(){return y("#FFAD00")},n.onstop=function(){return y("#000")},n.renderX=e.dx+e.x,n.renderY=e.dy+e.y,n.rect=e.rect,window.notes.push(n),vc.create("g",{class:"noteId",tie:"".concat(a?"1":"0")},[Nc(r),Cc(i),function(t){return!!t&&("end"!==t.tie.type||t.showPrev)}(a)?Rc(a):[],function(t){return t&&"start"===t.tuplet.type}(s)?Mc(s):[],u?u.map((function(t){return Rc(t)})):[],c?o(c.map((function(t){return t.showPrev?Rc(t):[]}))):[],f?f.map((function(t){return vc.push(h,"lyrics").create("text",Qc(Qc({},t.cxby),{},{style:l(Qc(Qc({},t),{},{anchor:"middle"}))}),t.text)})):[],f?o(f.map((function(t){var e=t.lyric;if(!e.next)return[];var n=t.x2,r=t.by;if(e.layout.sys!==e.next.layout.sys)return vc.push(h,"hyphens").create("text",{x:n+2,y:r,style:l(t)},"-");var o=e.next.layout;if(o){var i=o.x;return vc.push(h,"hyphens").create("text",{x:(n+i)/2,y:r,style:l(Qc(Qc({},t),{},{anchor:"middle"}))},"-")}}))):[]])):"rest"in t?function(t){var e=t.zeroLayout,n=t.durationLayout,r="\n    font-family: ".concat(e.family,"\n    font-size: ").concat(e.size,"\n    text-anchor: middle\n  ");return vc.create("g",{class:"restId"},[vc("text",qc(qc({},t.zeroLayout.cxby),{},{style:r}),0),Cc(n)])}(t):"chord"in t?function(t){var e=t.chord,n=t.pitchesLayout,r=t.durationLayout,i=t.tieLayout,a=t.tupletLayout,s=t.tieMode,u=t.beginSlursLayouts,c=t.endSlursLayouts,f=t.lyricsLayouts,l=function(t){var e=t.family,n=t.size,r=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(n,"\n    text-anchor: ").concat(r||"begin","\n  ")},h={},y=function(t){var e=h.lyrics,n=h.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),n&&n.forEach((function(e){return e.style.fill=t}))};return e.onplay=function(){return y("#FFAD00")},e.onstop=function(){return y("#000")},vc.create("g",[n.layouts.map((function(t){return Nc(t)})),Cc(r),function(t){return!("single"!==s||!t)&&("end"!==t.tie.type||t.showPrev)}(i)?Rc(i):[],function(t){return t&&"begin"===t.tuplet.type}(a)?Mc(a):[],u?u.map((function(t){return Rc(t)})):[],c?o(c.map((function(t){return t.showPrev?Rc(t):[]}))):[],f?f.map((function(t){return vc.push(h,"lyrics").create("text",Uc(Uc({},t.cxby),{},{style:l(Uc(Uc({},t),{},{anchor:"middle"}))}),t.text)})):[],f?o(f.map((function(t){var e=t.lyric;if(!e.next)return[];var n=t.x2,r=t.by;if(e.layout.sys!==e.next.layout.sys)return vc.push(h,"hyphens").create("text",{x:n+2,y:r,style:l(t)},"-");var o=e.next.layout;if(o){var i=o.x;return vc.push(h,"hyphens").create("text",{x:(n+i)/2,y:r,style:l(Uc(Uc({},t),{},{anchor:"middle"}))},"-")}}))):[]])}(t):"time"in t?(d=(p=t).time,v=p.beatsLayout,b=p.lineLayout,m=p.beatTypeLayout,w="font-family: ".concat(v.family,"\n                font-size: ").concat(v.size,"\n                text-anchor: middle"),g="font-family: ".concat(m.family,"\n                font-size: ").concat(m.size,"\n                text-anchor: middle"),vc.create("g",[vc("text",Hc(Hc({},v.cxby),{},{style:w}),d.beats),vc("rect",b.rect),vc("text",Hc(Hc({},m.cxby),{},{style:g}),d.beatType)])):"direction"in t?(x=(O=t).direction,P=O.textLayout,L=x.words,E=x.dynamics,vc.create("g",[P?vc("text",_c(_c({},P.xby),{},{style:(S=P,k=S.family,j=S.size,"\n    font-family: ".concat(k,"\n    font-size: ").concat(j,"\n  "))}),L||E):[]])):"multipart"in t?function(t){return t.dataLayout,vc.create("g",[])}(t):void 0;var e,n,r,i,a,s,u,c,f,l,h,y,p,d,v,b,m,w,g,O,S,k,j,x,P,L,E})),tf(r||n)])}function nf(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function rf(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?nf(Object(n),!0).forEach((function(e){of(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):nf(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function of(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function af(t){var e=function(t){switch(t){case 0:return"C";case 1:return"G";case 2:return"D";case 3:return"A";case 4:return"E";case 5:return"B";case 6:case-1:return"F";case-2:return"B";case-3:return"E";case-4:return"A";case-5:return"D";case-6:return"G"}}(t.fifths),n=window.timeLayoutx2cy,r={x:n.x-35,y:n.y+4},o={x:n.x-48,y:n.y-5},i={x:n.x-55,y:n.y+2};return vc.create("g",[vc("text",rf(rf({},i),{},{style:"\n    font-family: Cadence\n    font-size: 16\n    text-anchor: end\n    alignment-baseline: middle\n  "}),"1 = "),6===t.fifths&&vc("text",rf(rf({},o),{},{style:"\n    font-family: Cadence\n    font-size: 8\n    text-anchor: end\n    alignment-baseline: middle\n  "}),"#"),-2===t.fifths&&vc("text",rf(rf({},o),{},{style:"\n    font-family: Cadence\n    font-size: 8\n    text-anchor: end\n    alignment-baseline: middle\n  "}),"b"),vc("text",rf(rf({},r),{},{style:"\n    font-family: Cadence\n    font-size: 16\n    text-anchor: end\n    alignment-baseline: middle\n  "}),e)])}function sf(t,e){t.headLayout;var n=t.measuresLayouts;return void 0===window.notes&&(window.notes=[]),void 0===window.restNote&&(window.restNote=[]),void 0===window.timeNote&&(window.timeNote=1),vc.create("g",[e?af(e):[],n.map((function(t){return n=(e=t).cellsLayouts,r=e.leftBarLayouts,o=e.rightBarLayouts,vc.create("g",{},[n.map((function(t){return ef(t)})),r?r.map((function(t){return tf(t)})):[],o?o.map((function(t){return tf(t)})):[]]);var e,n,r,o}))])}function uf(t){var e=t.systemsLayouts,n=e[0].measuresLayouts[0].cellsLayouts[0].cell.data[1],r=e[0].measuresLayouts[0].cellsLayouts[0].dataLayout.layouts[0].x2cy;return n&&(window.keyTone=n.fifths),r&&(window.timeLayoutx2cy=r),vc.create("g",[e.map((function(t){return sf(t,n)}))])}function cf(t){t.innerLayout,t.headLayout;var e=t.bodyLayout;return vc.create("svg",t.wh,[uf(e)])}function ff(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function lf(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var hf=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;ff(this,t),this.toJSON=v("head","body"),this.toMxl=Nn,this.name="score","string"==typeof e?this.parse(new Q(e)):(this.head=new q(e.head),this.body=new Ue(e.body)),this.style=n,null==n&&(this.style=new ar(sr)),this.player=new $n(this)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){t.skipWhite(),this.head=new q(t),this.body=new Ue(t)}},{key:"addStyle",value:function(){var t=this,e=Array.from(arguments);return e.forEach((function(e){return t.style.add(e)})),this}},{key:"render",value:function(){return cf(new Zu(this))}},{key:"play",value:function(){this.player.playInPr()}},{key:"pause",value:function(){this.player.pauseInPr()}},{key:"stop",value:function(){this.player.stopInPr()}},{key:"toString",value:function(){return[this.head,this.body].join("\n\n")}}])&&lf(e.prototype,n),r&&lf(e,r),t}();hf.fromMxl=function(t){var e=new _e(t),n={head:{name:"head",title:""},body:{name:"body"}},r=n.head,o=n.body,i=0;return e.root.actContent({"movement-title":function(t){r.title=t.content},identification:function(t){return t.actContent({creator:function(t){r[t.getAttr("type")]=t.content}})},credit:function(t){return ln(t,r)},"part-list":function(t){o.parts=hn(t)},part:function(t){yn(t,o.parts[i]),i++}}),""===r.title&&(r.title=" "),n},hf.fromScoreMxl=function(t){var e=new _e(t),n={head:{name:"head"},body:{name:"body"}},r=n.head,o=n.body,i=0;return e.root.actContent({"movement-title":function(t){r.title=t.content},identification:function(t){return t.actContent({creator:function(t){r[t.getAttr("type")]=t.content}})},credit:function(t){return ln(t,r)},"part-list":function(t){o.parts=hn(t)},part:function(t){yn(t,o.parts[i]),i++}}),new hf(n)};n(0);var yf=new ar(sr);var pf=0;window.hliglightNextNote=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:80;if(void 0!==window.notes&&0!=window.notes.length){var e=window.notes,n=pf-1,r=pf%e.length;n<0&&(n=0),n>=e.length-1&&(n=e.length-1,pf=0),e[n].onstop(),e[r].onplay();var o=0-e[pf].renderX+t;try{$("#score").animate({left:o},100)}catch(t){}pf+=1}},window.showCursorInFirstNote=function(){void 0!==window.notes&&0!=window.notes.length&&(resetPlayIndex(),window.notes[0].onplay())},window.resetPlayIndex=function(){if(void 0!==window.notes&&0!=window.notes.length){for(var t=window.notes,e=0;e<t.length;e++)t[e].onstop();pf=0}},window.getScoreView=function(t,e){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;e>0&&(yf.rawValue.score.width=e);var n=vc.setData({score:{get:function(){var e;try{e=new hf(hf.fromMxl(t),yf)}catch(t){e=new hf,this.error=t}return e}},scoreLayout:{get:function(){return new Zu(this.score)}},error:"",scoreElement:{el:function(){return cf(this.scoreLayout)}}}),r=vc.create("div",{style:"width: 100%;overflow: none;position:relative;background-color: rgba(255,255,255,0);display: flex;align-items: center;",id:"numberScore"},[n.$scoreElement,vc("div",{style:"width: 8px;height: 40px;background: rgb(255, 173, 0);mix-blend-mode: multiply;display: none;position: absolute;left: 0;z-index: 999;",id:"scrollBox"})]);return r}(t,e)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,